Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 1
regfrm.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5				     ; ===========================================================
      6				     .PushRegs	 macro
      7
      8						 ;pusha	; - FALLS HERE
      9						 ; ====== instead pusha	=====
     10						 push ax
     11						 push cx
     12						 push dx
     13						 push bx
     14						 push sp ; well	thats kinda wrong...*
     15						 push bp
     16						 push si
     17						 push di
     18						 ; ==========================
     19						 push es
     20						 push ds
     21
     22						 ; * maybe correct sp?
     23						 ; // TODO -
     24
     25						 endm
     26
     27				     ; ===========================================================
     28				     .PopRegs	 macro
     29
     30						 pop ds
     31						 pop es
     32						 ;popa ; - FALLS HERE
     33						 ; ======== instead popa ==============
     34						 pop di
     35						 pop si
     36						 pop bp
     37						 pop sp
     38						 pop bx
     39						 pop dx
     40						 pop cx
     41						 pop ax
     42
     43						 endm
     44				     ; ===========================================================
     45				     ; RegFrm.asm
     46				     ; Description:
     47				     ;	 Residential prog. Shows a frame with current register
     48				     ;	 values	when F1	is pressed. Press F1 again to hide the frame.
     49				     ; ===========================================================
     50	0100			     Start:
     51
     52						 ; ==================================
     53						 ; Hooking keyboard handler
     54	0100  BE 01C9r				 mov si, offset	OldKbdHndlrOfs
     55	0103  BF 01CBr				 mov di, offset	OldKbdHndlrSeg
     56	0106  B9 017Er				 mov cx, offset	KbdHndl
     57	0109  BA 0009				 mov dx, 09h ; Keyboard	INT
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 2
regfrm.asm



     58	010C  E8 071E				 call HookEvtHnl
     59
     60						 ; ==================================
     61						 ; Hooking timer handler
     62	010F  BE 06C7r				 mov si, offset	OldTmrHndlrOfs
     63	0112  BF 06C9r				 mov di, offset	OldTmrHndlrSeg
     64	0115  B9 0687r				 mov cx, offset	TmrHndl
     65	0118  BA 0008				 mov dx, 08h ; Timer INT
     66	011B  E8 070F				 call HookEvtHnl
     67
     68	011E  E8 072B				 call EndPreps
     69
     70
     71						 COMMENT #
     72						 call ShowFrame
     73						 mov IsFrameShwn, 1
     74						 call TmrHndl
     75
     76						 mov ax, 4c13h
     77						 int 21h
     78						 #
     79
     80
     81				     ; ===========================================================
     82				     ; ================== GLOBAL CONSTANTS =======================
     83	      =003B		     KeyToggle	 equ 3Bh ; F1 pressed
     84
     85	      =0050		     ScreenW	 equ 80d
     86	      =0019		     ScreenH	 equ 25d
     87
     88	      =0014		     FrmWidth	 equ 20d
     89	      =000F		     FrmHeight	 equ 15d
     90
     91	      =001E		     TLCol	 equ ( ScreenW - FrmWidth ) / 2	 ; Col of Top Left char
     92	      =0005		     TLRow	 equ ( ScreenH - FrmHeight ) / 2 ; Row of Top Left char
     93
     94						 ; offset from 0B800h of the
     95						 ; first byte of frame
     96	      =035C		     FirstFrmByte equ (TLRow * ScreenW + TLCol)*2
     97
     98				     ; Offsets in videomem for registers' values from 0B800h
     99	      =04A8		     BaseRegOfs	equ ((TLRow + 2) * ScreenW + (TLCol + 6) ) * 2
    100
    101	      =04A8		     OfsAX	 equ BaseRegOfs	+ 0 * ScreenW*2
    102	      =0548		     OfsCX	 equ BaseRegOfs	+ 1 * ScreenW*2
    103	      =05E8		     OfsDX	 equ BaseRegOfs	+ 2 * ScreenW*2
    104	      =0688		     OfsBX	 equ BaseRegOfs	+ 3 * ScreenW*2
    105	      =0728		     OfsSP	 equ BaseRegOfs	+ 4 * ScreenW*2
    106	      =07C8		     OfsBP	 equ BaseRegOfs	+ 5 * ScreenW*2
    107	      =0868		     OfsSI	 equ BaseRegOfs	+ 6 * ScreenW*2
    108	      =0908		     OfsDI	 equ BaseRegOfs	+ 7 * ScreenW*2
    109
    110	0121  4E C9 CD BB BA 20	BA+  Style	 db  4Eh, '…Õª∫	∫»Õº'
    111	      C8 CD BC
    112	012B  52 65 67 69 73 74	65+  FrmText	 db 'Register values:\n\nAX: '
    113	      72 20 76 61 6C 75	65+
    114	      73 3A 5C 6E 5C 6E	41+
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 3
regfrm.asm



    115	      58 3A 20
    116	0143  48 4C 5C 6E 43 58	3A+		 db 'HL\nCX: '
    117	      20
    118	014B  48 4C 5C 6E 44 58	3A+		 db 'HL\nDX: '
    119	      20
    120	0153  48 4C 5C 6E 42 58	3A+		 db 'HL\nBX: '
    121	      20
    122	015B  48 4C 5C 6E 53 50	3A+		 db 'HL\nSP: '
    123	      20
    124	0163  48 4C 5C 6E 42 50	3A+		 db 'HL\nBP: '
    125	      20
    126	016B  48 4C 5C 6E 53 49	3A+		 db 'HL\nSI: '
    127	      20
    128	0173  48 4C 5C 6E 44 49	3A+		 db 'HL\nDI: '
    129	      20
    130	017B  48 4C FF				 db 'HL', 0FFh
    131
    132				     ; ===========================================================
    133				     ; KbdHndl - RESIDENTIAL FUNCTION
    134				     ; Description:
    135				     ;	 Keyboard interruption handler.	If pressed key is F1,
    136				     ;	 a frame with current register values is shown/hidden.
    137				     ;
    138				     ; ===========================================================
    139	017E			     KbdHndl	 proc
    140
    141						 ; =============================
    142						 ; chechking if	it is needed key
    143	017E  50				 push ax
    144	017F  E4 60				 in al,	60h
    145	0181  3C 3B				 cmp al, KeyToggle
    146	0183  58				 pop ax
    147	0184  75 42				 jne WrongKey
    148
    149						 ; ==============================
    150						 ; Right key
    151
    152						 ; saving regs
    153						 .PushRegs
1   154
1   155						 ;pusha	; - FALLS HERE
1   156						 ; ====== instead pusha	=====
1   157	0186  50				 push ax
1   158	0187  51				 push cx
1   159	0188  52				 push dx
1   160	0189  53				 push bx
1   161	018A  54				 push sp ; well	thats kinda wrong...*
1   162	018B  55				 push bp
1   163	018C  56				 push si
1   164	018D  57				 push di
1   165						 ; ==========================
1   166	018E  06				 push es
1   167	018F  1E				 push ds
1   168
1   169						 ; * maybe correct sp?
1   170						 ; // TODO -
1   171
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 4
regfrm.asm



    172
    173						 ; ============================
    174						 ; ds =	cs, because ds is wrong
    175	0190  0E				 push cs
    176	0191  1F				 pop ds
    177
    178						 ; ============================
    179	0192  2E: 80 3E	01CDr 00		 cmp cs:[ISFRAMESHWN], 0h
    180	0198  74 0C				 je JShowFrame
    181
    182						 ; =====================================
    183						 ; disable frame
    184	019A  C6 06 01CDr 00 90			 mov IsFrameShwn, 0
    185
    186	01A0  E8 0549				 call HideFrame
    187
    188	01A3  EB 0A 90				 jmp EvntHndlEnd
    189						 ; =====================================
    190						 ; show	frame
    191	01A6  C6 06 01CDr 01 90	     JShowFrame: mov IsFrameShwn, 1
    192	01AC  E8 051C				 call ShowFrame
    193	01AF			     EvntHndlEnd:
    194
    195						 ; ====================================
    196						 ; Confirm geting scan code on our own
    197						 ; and ret to main prog
    198
    199						 ; Blinking for	keyboard controller
    200	01AF  E4 61				 in al,	61h
    201	01B1  0C 80				 or al,	80h
    202	01B3  E6 61				 out 61h, al
    203	01B5  24 7F				 and al, not 80h
    204	01B7  E6 61				 out 61h, al
    205
    206						 ; send	EOI to INT Cntrl
    207	01B9  B0 20				 mov al, 20h
    208	01BB  E6 20				 out 20h, al
    209
    210						 ; =====================================
    211						 ; restoring regs
    212						 .PopRegs
1   213
1   214	01BD  1F				 pop ds
1   215	01BE  07				 pop es
1   216						 ;popa ; - FALLS HERE
1   217						 ; ======== instead popa ==============
1   218	01BF  5F				 pop di
1   219	01C0  5E				 pop si
1   220	01C1  5D				 pop bp
1   221	01C2  5C				 pop sp
1   222	01C3  5B				 pop bx
1   223	01C4  5A				 pop dx
1   224	01C5  59				 pop cx
1   225	01C6  58				 pop ax
1   226
    227						 ; ====================================
    228	01C7  CF				 iret
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 5
regfrm.asm



    229
    230						 ; ====================================
    231	01C8  EA		     WrongKey:	     db	0EAh	 ; jmp to old keyboard handler
    232	01C9  0000		     OldKbdHndlrOfs  dw	0	 ; offset
    233	01CB  0000		     OldKbdHndlrSeg  dw	0	 ; segment
    234
    235	01CD					 endp
    236				     ; ===========================================================
    237				     ; =================== GLOBAL VARIABLES ======================
    238
    239	01CD  00		     IsFrameShwn db 0	     ; 0 if frame isn't	shown, 1 otherwise
    240				     ; Buf for the old screen state.
    241	01CE  04B0*(??)		     ScreenBuf	 db (FrmWidth*2)*(FrmHeight*2) DUP(?)
    242	      =04B0		     BufSize	 equ $ - ScreenBuf
    243
    244				     ; ===========================================================
    245
    246				     ; ===========================================================
    247				     ; TmrHndl
    248				     ; Description:
    249				     ;	 Timer interruption handler. If	the frame is currently
    250				     ;	 shown ( IsFrameShwn ==	1 ), types in current registers'
    251				     ;	 values.
    252				     ; ===========================================================
    253	067E  4D 4D 45 45 4F 4F	57+  MeowStr	 db 'MMEEOOWW',	'$'
    254	      57 24
    255
    256	0687			     TmrHndl	 proc
    257
    258	      =00A0		     OfsRegDiff	 equ ScreenW * 2
    259
    260						 ; èéóÖåì çÖ êÄÅéíÄÖí cmp [ISFRAMESHWN], 1h ??
    261	0687  2E: 80 3E	01CDr 00		 cmp cs:[ISFRAMESHWN], 0h
    262	068D  74 37				 je TmrHndlEnd
    263
    264						 ; frame is shown, time	to type	regs' values
    265
    266						 ; saving regs
    267						 .PushRegs
1   268
1   269						 ;pusha	; - FALLS HERE
1   270						 ; ====== instead pusha	=====
1   271	068F  50				 push ax
1   272	0690  51				 push cx
1   273	0691  52				 push dx
1   274	0692  53				 push bx
1   275	0693  54				 push sp ; well	thats kinda wrong...*
1   276	0694  55				 push bp
1   277	0695  56				 push si
1   278	0696  57				 push di
1   279						 ; ==========================
1   280	0697  06				 push es
1   281	0698  1E				 push ds
1   282
1   283						 ; * maybe correct sp?
1   284						 ; // TODO -
1   285
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 6
regfrm.asm



    286
    287						 ; ====================================
    288
    289	0699  B8 B800				 mov ax, 0B800h
    290	069C  8E C0				 mov es, ax
    291
    292	069E  BF 04A8				 mov di, OfsAX
    293	06A1  8B EC				 mov bp, sp
    294	06A3  83 C5 12				 add bp, 2 * 9d	; moving bp to point at	stored AX
    295
    296	06A6  B9 0008				 mov cx, 8d  ; number of regs to print
    297	06A9  8B 46 00		     TmrHndlL:	 mov ax, [bp]
    298
    299	06AC  8B D9				 mov bx, cx ; saving cx
    300	06AE  E8 0155				 call PrnW
    301	06B1  8B CB				 mov cx, bx ; restoring	cx
    302
    303	06B3  83 ED 02				 sub bp, 2d	; reduce by word size
    304	06B6  81 C7 00A0			 add di, OfsRegDiff
    305	06BA  E2 ED				 loop TmrHndlL
    306
    307						 ; =====================================
    308						 ; restoring regs
    309						 .PopRegs
1   310
1   311	06BC  1F				 pop ds
1   312	06BD  07				 pop es
1   313						 ;popa ; - FALLS HERE
1   314						 ; ======== instead popa ==============
1   315	06BE  5F				 pop di
1   316	06BF  5E				 pop si
1   317	06C0  5D				 pop bp
1   318	06C1  5C				 pop sp
1   319	06C2  5B				 pop bx
1   320	06C3  5A				 pop dx
1   321	06C4  59				 pop cx
1   322	06C5  58				 pop ax
1   323
    324
    325						 ; ====================================
    326						 ; end
    327	06C6  EA		     TmrHndlEnd:     db	0EAh	 ; jmp to old timer handler
    328	06C7  0000		     OldTmrHndlrOfs  dw	0	 ; offset
    329	06C9  0000		     OldTmrHndlrSeg  dw	0	 ; segment
    330
    331	06CB					 endp
    332				     ; ===========================================================
    333
    334				     ; ===========================================================
    335				     ; ShowFrame
    336				     ; Description:
    337				     ;	 Is called by EventHndl	to show	frame.
    338				     ; DESTROYS:
    339				     ;	 AL, AH, SI, BX, CX, ES
    340				     ; ===========================================================
    341	06CB			     ShowFrame	 proc
    342
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 7
regfrm.asm



    343						 ; ===============================================
    344						 ; SAVING PREV SCREEN STATE INTO BUF
    345	06CB  1E				 push ds ; saving
    346
    347						 ; adjusting to	use movsw
    348						 ; destination
    349	06CC  1E				 push ds
    350	06CD  07				 pop es
    351	06CE  BF 01CEr				 mov di, offset	ScreenBuf
    352
    353						 ; source
    354	06D1  68 B800				 push 0B800h
    355	06D4  1F				 pop ds
    356	06D5  BE 035C				 mov si, FirstFrmByte
    357
    358						 ; saving prev screen state into buf
    359	06D8  B2 00				 mov dl, 0h
    360	06DA  E8 0020				 call MovBuf
    361
    362	06DD  1F				 pop ds	; restoring ds
    363
    364						 ; =============================================
    365						 ; drawing frame
    366	06DE  B0 14				 mov al, FrmWidth
    367	06E0  B4 0F				 mov ah, FrmHeight
    368	06E2  BE 0121r				 mov si, offset	Style
    369	06E5  BB 012Br				 mov bx, offset	FrmText
    370	06E8  E8 0035				 call DrawFrame
    371
    372	06EB  C3				 ret
    373	06EC					 endp
    374				     ; ===========================================================
    375				     ; HideFrame
    376				     ; Description:
    377				     ;	 Is called by EventHndl	to disable frame.
    378				     ; DESTROYS:
    379				     ;	 AX, ES, DI, SI, CX
    380				     ; ===========================================================
    381	06EC			     HideFrame	 proc
    382
    383						 ; ===============================================
    384						 ; moving bytes	from screenbuf into videomem
    385
    386						 ; adjusting to	use movsw
    387						 ; destination
    388	06EC  B8 B800				 mov ax, 0B800h
    389	06EF  8E C0				 mov es, ax
    390	06F1  BF 035C				 mov di, offset	FirstFrmByte
    391
    392						 ; source
    393						 ; ds is ds
    394	06F4  BE 01CEr				 mov si, offset	ScreenBuf
    395
    396	06F7  B2 01				 mov dl, 1h
    397	06F9  E8 0001				 call MovBuf
    398
    399	06FC  C3				 ret
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 8
regfrm.asm



    400	06FD					 endp
    401				     ; ===========================================================
    402				     ; MovBuf
    403				     ; Description:
    404				     ;	 A small helping function to mov prev part of the screen
    405				     ;	 into buf or the other way round. It moves only	part of	the
    406				     ;	 screen, hidden	by the frame.
    407				     ; Assumes:
    408				     ;	 - ES:[DI] first byte of destination
    409				     ;	 - DS:[SI] first byte of source
    410				     ;	 - If DL = 0, bytes from videomem move to buffer,
    411				     ;	 if DL = 1, bytes from buffer are moved	to videomem.
    412				     ; DESTROYS:
    413				     ;	 SI, DI, CX
    414				     ; ===========================================================
    415	06FD			     MovBuf	 proc
    416
    417	06FD  B9 000F				 mov cx, FrmHeight
    418
    419	0700  51		     ShFrmOutL:	 push cx ; saving outter loop cnt
    420						 ; inner loop
    421	0701  B9 0014				 mov cx, FrmWidth
    422	0704  F3> A5				 rep movsw
    423
    424	0706  80 FA 00				 cmp dl, 0h
    425	0709  74 0A				 je VidToBuf
    426						 ; BufToVid
    427	070B  83 EF 28				 sub di, FrmWidth*2 ; ret back to line start
    428	070E  81 C7 00A0			 add di, ScreenW*2  ; next line
    429	0712  EB 08 90				 jmp CmnPath
    430	0715  83 EE 28		     VidToBuf:	 sub si, FrmWidth*2 ; ret back to line start
    431	0718  81 C6 00A0			 add si, ScreenW*2  ; next line
    432
    433	071C  59		     CmnPath:	 pop cx	; restoring outter loop	cnt
    434	071D  E2 E1				 loop ShFrmOutL
    435
    436	071F  C3				 ret
    437	0720					 endp
    438				     ; ===========================================================
    439				     include DrFrm.asm
1   440				     .DrFrmNewLine   macro
1   441						     nop
1   442						     add di, DRFRM_SCREEN_W * 2	; next line:
1   443						     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1   444						     mov dl, al
1   445						     add dl, al
1   446						     sub di, dx
1   447						     nop
1   448						     endm
1   449
1   450				     ; ===================================================
1   451				     ; DrawFrame
1   452				     ; Description:
1   453				     ;	 Draws a frame in videomem.
1   454				     ; Args:
1   455				     ;	 - AL:	     Width
1   456				     ;	 - AH:	     Height
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 9
regfrm.asm



1   457				     ;	 - DS:[SI]:  Address of	string,	containing frame
1   458				     ;		     symbols and attribute byte	(see ***)
1   459				     ;	 - DS:[BX]:  Address of	string,	containing
1   460				     ;		     header and	text as	follows:
1   461				     ;		     'header\n\ntext', with byte 0FFh in
1   462				     ;		     the end. '\\' in header or	in text
1   463				     ;		     means single '\', '\n' in text means
1   464				     ;		     new line.
1   465				     ; ***:
1   466				     ;	 Starts	with the attribute byte, followed by 9
1   467				     ;	 bytes with symbols, used for frame. Example:
1   468				     ;
1   469				     ;	 Bytes:
1   470				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
1   471				     ;	 Corresponding symbols:
1   472				     ;	 A   B	 C   D	 E   F	 G   H	 I
1   473				     ;
1   474				     ;	 Frame will be drawn in	the following way:
1   475				     ;
1   476				     ;	 AB......BC
1   477				     ;	 DE......EF
1   478				     ;	 ..........
1   479				     ;	 DE......EF
1   480				     ;	 GH......HI
1   481				     ;
1   482				     ;	 So, this string must contain 10 bytes.
1   483				     ; Attention:
1   484				     ;	 All args must have sensible values, otherwise UB.
1   485				     ; DESTROYS:
1   486				     ;	 CX, SI, DI, DX
1   487				     ; Changes:
1   488				     ;	 ES = 0b800h
1   489				     ; ===================================================
1   490	0720			     DrawFrame	     proc
1   491	      =0050		     DRFRM_SCREEN_W  equ 80d
1   492	      =0019		     DRFRM_SCREEN_H  equ 25d
1   493
1   494						     ; ====================================
1   495						     ; moving style bytes to DrFrmData
1   496
1   497	0720  BF 07A6r				     mov di, offset DRFRMDATA
1   498	0723  8A 34				     mov dh, [si] ; dh = attribute byte
1   499	0725  46				     inc si ; [si] -> byte_A
1   500
1   501	0726  B9 0009				     mov cx, 9d
1   502						     ;xchg ax, dx
1   503	0729  8A 14		     DrFrmDatLoop:   mov dl, [si]
1   504	072B  88 15				     mov [di], dl
1   505	072D  88 75 01				     mov [di + 1], dh
1   506	0730  46				     inc si
1   507	0731  83 C7 02				     add di, 2d
1   508	0734  E2 F3				     loop DrFrmDatLoop
1   509
1   510	0736  BE 07A6r				     mov si, offset DRFRMDATA
1   511
1   512						     ; ====================================
1   513						     ; computing into DI address of the	A
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 10
regfrm.asm



1   514
1   515						     ; cl = col	= (screen_w - w) / 2
1   516	0739  8A C8				     mov cl, al
1   517	073B  80 E9 50				     sub cl, DRFRM_SCREEN_W
1   518	073E  F6 D9				     neg cl
1   519	0740  D0 E9				     shr cl, 1
1   520
1   521						     ; ch = row	= (screen_h - h) / 2
1   522	0742  8A EC				     mov ch, ah
1   523	0744  80 ED 19				     sub ch, DRFRM_SCREEN_H
1   524	0747  F6 DD				     neg ch
1   525	0749  D0 ED				     shr ch, 1
1   526
1   527						     ; saving for printing header and text a lot later
1   528	074B  51				     push cx
1   529
1   530						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
1   531						     ; ASSUMING	DRFRM_SCREEN_W = 80
1   532	074C  33 FF				     xor di, di
1   533	074E  50				     push ax ; saving
1   534
1   535	074F  33 C0				     xor ax, ax
1   536	0751  8A C5				     mov al, ch
1   537	0753  BA 0050				     mov dx, 80d
1   538	0756  F6 E2				     mul dl
1   539
1   540	0758  03 F8				     add di, ax
1   541
1   542	075A  8A D1				     mov dl, cl
1   543	075C  03 FA				     add di, dx
1   544
1   545	075E  D1 E7				     shl di, 1
1   546
1   547						     ; while ax	is free...
1   548	0760  B8 B800				     mov ax, 0B800h
1   549	0763  8E C0				     mov es, ax
1   550
1   551	0765  58				     pop ax
1   552
1   553						     ; ====================================
1   554						     ; drawing top line
1   555
1   556	0766  E8 004F				     call DrawHorLine
1   557
1   558						     ; ====================================
1   559						     ; drawing middle line(s)
1   560
1   561						     .DrFrmNewLine
2   562	0769  90				     nop
2   563	076A  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   564	076E  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   565	0770  8A D0				     mov dl, al
2   566	0772  02 D0				     add dl, al
2   567	0774  2B FA				     sub di, dx
2   568	0776  90				     nop
1   569
1   570	0777  33 C9				     xor cx, cx	; cx = height -	2
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 11
regfrm.asm



1   571	0779  8A CC				     mov cl, ah
1   572	077B  83 E9 02				     sub cx, 2h
1   573	077E			     DrFrmMLOutLoop:
1   574	077E  51				     push cx ; saving outter loop cnt
1   575
1   576	077F  E8 0036				     call DrawHorLine
1   577
1   578						     .DrFrmNewLine
2   579	0782  90				     nop
2   580	0783  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   581	0787  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   582	0789  8A D0				     mov dl, al
2   583	078B  02 D0				     add dl, al
2   584	078D  2B FA				     sub di, dx
2   585	078F  90				     nop
1   586
1   587	0790  83 EE 06				     sub si, 6d	 ; returning back to D
1   588
1   589	0793  59				     pop cx ; ressurecting outter loop cnt
1   590	0794  E2 E8				     loop DrFrmMLOutLoop
1   591
1   592						     ; ====================================
1   593						     ; drawing bottom line
1   594
1   595	0796  83 C6 06				     add si, 6d	 ; setting to G
1   596
1   597	0799  E8 001C				     call DrawHorLine
1   598
1   599						     ; ====================================
1   600						     ; print header and	text
1   601
1   602	079C  8B F3				     mov si, bx
1   603	079E  5B				     pop bx  ; bx = row	(bh) and col (bl) of
1   604							     ; the first symbol	in frame (A)
1   605
1   606	079F  80 C3 02				     add bl, 2d	 ; one space between borders
1   607								 ; and text
1   608
1   609	07A2  E8 0026				     call PrintText
1   610
1   611						     ; ====================================
1   612						     ; end
1   613	07A5  C3				     ret
1   614
1   615				     ; is filled with all frame	symbols
1   616				     ; and attribute bytes (#) to simplify some	code
1   617	07A6  12*(??)		     DrFrmData	     db	18 DUP(?)
1   618				     ;			A # B #	... I #
1   619
1   620	07B8					     endp
1   621				     ; ===================================================
1   622
1   623				     ; ===================================================
1   624				     ; DrawHorLine
1   625				     ; Description:
1   626				     ;	 Helping function DrawFrame. Not for using on its
1   627				     ;	 own.
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 12
regfrm.asm



1   628				     ; Assumes:
1   629				     ;	 - ES =	0B800h
1   630				     ;	 - DI points at	the place for the first	symbol.
1   631				     ;	 - SI points at	A, D or	G
1   632				     ;	 - Width of the	line in	AL
1   633				     ; DESTROYS:
1   634				     ;	 CX
1   635				     ; Outcome:
1   636				     ;	 - SI points at	the next left bound symbol
1   637				     ;	 - DI points at	the byte right after the last
1   638				     ;	 byte of the drawn line.
1   639				     ;
1   640				     ; ===================================================
1   641	07B8			     DrawHorLine     proc
1   642
1   643	07B8  A5				     movsw   ; Left bound symb (A, D or	G)
1   644
1   645						     ; Inner symb (B, E	or H)
1   646	07B9  33 C9				     xor cx, cx
1   647	07BB  8A C8				     mov cl, al	; cx = w
1   648	07BD  83 E9 02				     sub cx, 2h	; without boundary symbols
1   649
1   650	07C0  A5		     DrHorLineLoop:  movsw
1   651	07C1  83 EE 02				     sub si, 2h
1   652	07C4  E2 FA				     loop DrHorLineLoop
1   653
1   654	07C6  83 C6 02				     add si, 2h
1   655	07C9  A5				     movsw   ; Right bound symb	(C, F or I)
1   656
1   657	07CA  C3				     ret
1   658	07CB					     endp
1   659				     ; ===================================================
1   660				     include PrnText.asm
2   661				     ; ===================================================
2   662				     ; PrintText
2   663				     ; Description:
2   664				     ;	 Prints	given string of	text into the videomem
2   665				     ;	 according to the following rules:
2   666				     ;	 - '\n'	is interpreted as a command to go onto a
2   667				     ;	 new line. New line starts in the same column, as
2   668				     ;	 the first symbol (see args), one row lower.
2   669				     ;	 - '\\'	is printed as a	single '\'.
2   670				     ;	 - Single '\' followed by any symbol other than	'n'
2   671				     ;	 is UB!
2   672				     ;	 - The whole string must end with byte FFh.
2   673				     ;	 - UB if length	of one line exceeds screen width.
2   674				     ;	 - Attribute bytes don't change.
2   675				     ; Args:
2   676				     ;	 - DS:[SI] pointing at the beginning of	the string.
2   677				     ;	 - BL -	Col number of the first	symbol.
2   678				     ;	 - BH -	Row number of the first	symbol.
2   679				     ; Assumes:
2   680				     ;	 ES = 0b800h
2   681				     ; DESTROYS:
2   682				     ;	 AX, CX, DI, BH, DX
2   683				     ; Attention:
2   684				     ;	 All args must have sensible values, otherwise UB.
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 13
regfrm.asm



2   685				     ; ===================================================
2   686	07CB			     PrintText	     proc
2   687
2   688	      =0050		     PrnTextScreenW  equ 80d
2   689
2   690	      =005C		     ByteCtrl	     equ 5Ch	 ; '\'
2   691	      =006E		     ByteNewLine     equ 'n'
2   692	      =00FF		     ByteStrEnd	     equ 0FFh
2   693
2   694						     ; ===================================
2   695						     ; computing offset	in the videomem
2   696						     ; of the first symbol into	DI
2   697
2   698						     ; AX = row	* 80d =	Bh * 80d
2   699	07CB  33 C0				     xor ax, ax
2   700	07CD  8A C7				     mov al, bh
2   701	07CF  B9 0050				     mov cx, 80d
2   702	07D2  F7 E1				     mul cx
2   703
2   704	07D4  8B F8				     mov di, ax	 ; DI =	row*80
2   705
2   706	07D6  33 C0				     xor ax, ax
2   707	07D8  8A C3				     mov al, bl	 ; AX =	Bl
2   708	07DA  03 F8				     add di, ax	 ; DI += col
2   709
2   710	07DC  D1 E7				     shl di, 1	    ; di*=2
2   711
2   712						     ; remembering offset of the first
2   713						     ; symbol in the line
2   714	07DE  8B D7				     mov dx, di
2   715
2   716						     ; ===================================
2   717						     ; printing	the string
2   718
2   719	07E0  8A 04		     PrnStrLoop:     mov al, [si]    ; al = current symbol
2   720
2   721	07E2  3C FF				     cmp al, BYTESTREND
2   722	07E4  74 1F				     je	PrnStrFinal
2   723
2   724	07E6  3C 5C				     cmp al, BYTECTRL
2   725	07E8  75 16				     jne PrnStrCommmon
2   726	07EA  46				     inc si
2   727	07EB  8A 24				     mov ah, [si]
2   728	07ED  80 FC 5C				     cmp ah, BYTECTRL
2   729	07F0  74 0E				     je	PrnStrCommmon
2   730	07F2  80 FC 6E				     cmp ah, BYTENEWLINE
2   731	07F5  75 0E				     jne PRNSTRFINAL
2   732
2   733	07F7  46				     inc si
2   734						     ; new line
2   735	07F8  81 C2 00A0			     add dx, PrnTextScreenW * 2
2   736	07FC  8B FA				     mov di, dx
2   737
2   738	07FE  EB E0				     jmp PrnStrLoop
2   739
2   740	0800  AA		     PrnStrCommmon:  stosb
2   741	0801  47				     inc di  ; passing over attribute byte
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 14
regfrm.asm



2   742	0802  46				     inc si
2   743	0803  EB DB				     jmp PrnStrLoop
2   744	0805			     PrnStrFinal:
2   745	0805  C3				     ret
2   746	0806					     endp
2   747				     ; ===================================================
2   748
1   749
    750				     include PrnWord.asm
1   751				     ;===================================================================
1   752				     ; PrnW
1   753				     ; Description:
1   754				     ;	 'Prints' to the given place in	memory AX
1   755				     ;	 in hex
1   756				     ; Args:
1   757				     ;	 - AX -	with word to print.
1   758				     ;	 - ES:[DI] - place in memory (see ***)
1   759				     ; ***:
1   760				     ;	 There must be 8 bytes pointed by DS:[DI]. if AX = ABCDh,
1   761				     ;	 the bytes will	be filled in the following way:
1   762				     ;	 A _ B _ C _ D _
1   763				     ;	 where '_' means this byte won't be changed.
1   764				     ; DESTROYS:
1   765				     ;	 CX, DX
1   766				     ;===================================================================
1   767	0806			     PrnW	 proc
1   768
1   769						 ; loop	start
1   770	0806  B9 0004				 mov cx, 4h	     ; rotating	ax 4 times
1   771	0809  8A D4		     PrnWL:	 mov dl, ah
1   772	080B  C0 EA 04				 shr dl, 4d
1   773	080E  80 FA 0A				 cmp dl, 10d
1   774	0811  7D 05				 jge short PrnWLtr
1   775
1   776	0813  80 C2 30				 add dl, '0' ; '0' ... '9'
1   777	0816  EB 06				 jmp short PrnWFin
1   778
1   779	0818  80 C2 41		     PrnWLtr:	 add dl, 'A' ; 'A' ... 'F'
1   780	081B  80 EA 0A				 sub dl, 0Ah
1   781
1   782	081E  26: 88 15		     PrnWFin:	 mov byte ptr es:[di], dl
1   783	0821  C1 C0 04				 rol ax, 4
1   784	0824  83 C7 02				 add di, 2d
1   785	0827  E2 E0				 loop PrnWL
1   786						 ; loop	end
1   787
1   788						 ; restoring di	value
1   789	0829  83 EF 08				 sub di, 8d
1   790
1   791						 ; end
1   792	082C  C3				 ret
1   793	082D					 endp
1   794				     ;===========================================
1   795
    796				     ; ===========================================================
    797				     ; Everything after	this line won't	be saved in the
    798				     ; interruption mode!
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 15
regfrm.asm



    799	082D			     EOP:
    800
    801				     ; ===========================================================
    802				     ; HookEvtHnl
    803				     ; Description:
    804				     ;	 A small helping function, which remembers old
    805				     ;	 INT Handler vector and	enters own value instead.
    806				     ; Args:
    807				     ;	 - DS:[SI] - a word var	to store offset	of the old handler
    808				     ;	 - DS:[DI] - a word var	to store segment of the	old handler
    809				     ;	 - CX -	offset (from cs) of the	new INT	Handler	func
    810				     ;	 - DX -	Int number (e.g., keyboard is 09h, timer is 08h)
    811				     ; DESTROYS:
    812				     ;	 AX, BX, ES
    813				     ; ===========================================================
    814	082D			     HookEvtHnl	 proc
    815
    816	082D  FA				 cli
    817
    818						 ; getting old INT handler vector
    819	082E  B4 35				 mov ah, 35h
    820	0830  8A C2				 mov al, dl
    821	0832  CD 21				 int 21h
    822
    823						 ; storing into	given vars
    824	0834  89 1C				 mov ds:[si], bx
    825	0836  8C C3				 mov bx, es
    826	0838  89 1D				 mov ds:[di], bx
    827
    828						 ; INT Handler vector
    829	083A  6A 00				 push 0
    830	083C  07				 pop es
    831	083D  8B DA				 mov bx, dx
    832	083F  C1 E3 02				 shl bx, 2d
    833
    834	0842  26: 89 0F				 mov es:[bx], cx ; offset
    835	0845  0E				 push cs
    836	0846  26: 8F 47	02			 pop es:[bx+2]	 ; seg
    837
    838	084A  FB				 sti
    839
    840	084B  C3				 ret
    841	084C					 endp
    842				     ; ===========================================================
    843
    844				     ; ===========================================================
    845				     ; EndPreps
    846				     ; Description:
    847				     ;	 A small helping function to end the preparation's part	of
    848				     ;	 the program and tell DOS to leave loaded resident part	of
    849				     ;	 the prog.
    850				     ; ===========================================================
    851	084C			     EndPreps	 proc
    852
    853						 ; counting number of paragraphs from cs:00
    854						 ; until label EOP
    855	084C  BA 082Dr				 mov dx, offset	EOP
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 16
regfrm.asm



    856	084F  C1 EA 04				 shr dx, 4
    857	0852  42				 inc dx
    858
    859						 ; calling the func
    860	0853  B8 3100				 mov ax, 3100h
    861	0856  CD 21				 int 21h
    862
    863						 ; well, ret is	not quite needed...
    864	0858					 endp
    865				     ; ===========================================================
    866				     end	 Start
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 17
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/24"
??FILENAME			  Text	 "regfrm  "
??TIME				  Text	 "17:17:39"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRM
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BASEREGOFS			  Number 04A8
BUFSIZE				  Number 04B0
BYTECTRL			  Number 005C
BYTENEWLINE			  Number 006E
BYTESTREND			  Number 00FF
CMNPATH				  Near	 DGROUP:071C
DRAWFRAME			  Near	 DGROUP:0720
DRAWHORLINE			  Near	 DGROUP:07B8
DRFRMDATA			  Byte	 DGROUP:07A6
DRFRMDATLOOP			  Near	 DGROUP:0729
DRFRMMLOUTLOOP			  Near	 DGROUP:077E
DRFRM_SCREEN_H			  Number 0019
DRFRM_SCREEN_W			  Number 0050
DRHORLINELOOP			  Near	 DGROUP:07C0
ENDPREPS			  Near	 DGROUP:084C
EOP				  Near	 DGROUP:082D
EVNTHNDLEND			  Near	 DGROUP:01AF
FIRSTFRMBYTE			  Number 035C
FRMHEIGHT			  Number 000F
FRMTEXT				  Byte	 DGROUP:012B
FRMWIDTH			  Number 0014
HIDEFRAME			  Near	 DGROUP:06EC
HOOKEVTHNL			  Near	 DGROUP:082D
ISFRAMESHWN			  Byte	 DGROUP:01CD
JSHOWFRAME			  Near	 DGROUP:01A6
KBDHNDL				  Near	 DGROUP:017E
KEYTOGGLE			  Number 003B
MEOWSTR				  Byte	 DGROUP:067E
MOVBUF				  Near	 DGROUP:06FD
OFSAX				  Number 04A8
OFSBP				  Number 07C8
OFSBX				  Number 0688
OFSCX				  Number 0548
OFSDI				  Number 0908
OFSDX				  Number 05E8
OFSREGDIFF			  Number 00A0
OFSSI				  Number 0868
OFSSP				  Number 0728
Turbo Assembler	 Version 4.1	    02/23/24 17:17:39	    Page 18
Symbol Table



OLDKBDHNDLROFS			  Word	 DGROUP:01C9
OLDKBDHNDLRSEG			  Word	 DGROUP:01CB
OLDTMRHNDLROFS			  Word	 DGROUP:06C7
OLDTMRHNDLRSEG			  Word	 DGROUP:06C9
PRINTTEXT			  Near	 DGROUP:07CB
PRNSTRCOMMMON			  Near	 DGROUP:0800
PRNSTRFINAL			  Near	 DGROUP:0805
PRNSTRLOOP			  Near	 DGROUP:07E0
PRNTEXTSCREENW			  Number 0050
PRNW				  Near	 DGROUP:0806
PRNWFIN				  Near	 DGROUP:081E
PRNWL				  Near	 DGROUP:0809
PRNWLTR				  Near	 DGROUP:0818
SCREENBUF			  Byte	 DGROUP:01CE
SCREENH				  Number 0019
SCREENW				  Number 0050
SHFRMOUTL			  Near	 DGROUP:0700
SHOWFRAME			  Near	 DGROUP:06CB
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:0121
TLCOL				  Number 001E
TLROW				  Number 0005
TMRHNDL				  Near	 DGROUP:0687
TMRHNDLEND			  Near	 DGROUP:06C6
TMRHNDLL			  Near	 DGROUP:06A9
VIDTOBUF			  Near	 DGROUP:0715
WRONGKEY			  Near	 DGROUP:01C8

Macro Name

.DRFRMNEWLINE
.POPREGS
.PUSHREGS

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0858 Word	  Public  CODE
