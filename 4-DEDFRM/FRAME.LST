Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 1
frame.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5				     ; ===========================================================
      6				     ; Frame.asm
      7				     ; Description:
      8				     ;	 Draws a frame with text on the	screen according
      9				     ;	 to settings, specified	in command line.
     10				     ; Command line arguments:
     11				     ;	 - Frame width (decimal	without	dign, 3	<= w <=	78 )
     12				     ;	 - Frame height	(decimal without dign, 3 <= h <= 24)
     13				     ;	 - Predefined style (0,	1, 2, 3) or custom (see	***)
     14				     ;	 - Frame attribute byte	in binary (like	'01001110'),
     15				     ;	 DONT FORGET LEADING ZEROES!
     16				     ;	 - Header and text, separated uding '\n\n' in the
     17				     ;	 following way:
     18				     ;	 'Header\n\ntext'
     19				     ;	 '\\' in header	or text	means a	dingle '\',
     20				     ;	 '\n' in text means a new line.
     21				     ; ***:
     22				     ;	 If you	want to	use a custom style, type '*' and
     23				     ;	 enter 9 symbols, which	will define your custom	style.
     24				     ; Example:
     25				     ;	 frame.com 40 15 2 4e Header\n\nSome Text
     26				     ; More complex example:
     27				     ;	 frame.com 40 15 *ABCDEFGHI 4e C:\\Header\n\nFirst\nSecond
     28				     ; ATTENTION:
     29				     ;	 Unexpected command line arguments lead	to UB!
     30				     ; ===========================================================
     31
     32	0100			     Start:
     33						     ; ==============================
     34						     ; ==============================
     35						     ; parsing cmd args
     36
     37	0100  BF 0080				     mov di, 80h
     38	0103  33 DB				     xor bx, bx
     39	0105  8A 1D				     mov bl, [di] ; bl = cmd line len
     40
     41						     ; ==============================
     42						     ; putting end symbol for text
     43	0107  C6 87 0081 FF			     mov byte ptr [81h+bx], 0FFh
     44
     45	010C  47				     inc di
     46	010D  E8 00E3				     call SkipSpaces
     47
     48	0110  33 C0				     xor ax, ax
     49						     ; ==============================
     50						     ; width
     51	0112  8A 05				     mov al, byte ptr [di]    ;	sure it	is a digit
     52	0114  2C 30				     sub al, '0'
     53	0116  47				     inc di
     54	0117  80 3D 20				     cmp byte ptr [di],	' '
     55	011A  74 0D				     je	short OneDigitWidth
     56						     ; so width	is two-digit
     57
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 2
frame.asm



     58						     ; al*=10
     59	011C  8A F8				     mov bh, al
     60	011E  C0 E0 03				     shl al, 3
     61	0121  02 C7				     add al, bh
     62	0123  02 C7				     add al, bh
     63
     64	0125  02 05				     add al, byte ptr [di]
     65	0127  2C 30				     sub al, '0'
     66
     67	0129  47		     OneDigitWidth:  inc di
     68	012A  E8 00C6				     call SkipSpaces
     69
     70						     ; ==============================
     71						     ; height
     72	012D  8A 25				     mov ah, byte ptr [di]    ;	sure it	is a digit
     73	012F  80 EC 30				     sub ah, '0'
     74	0132  47				     inc di
     75	0133  80 3D 20				     cmp byte ptr [di],	' '
     76	0136  74 0E				     je	short OneDigitHeight
     77						     ; so height is two-digit
     78
     79						     ; ah*=10
     80	0138  8A FC				     mov bh, ah
     81	013A  C0 E4 03				     shl ah, 3
     82	013D  02 E7				     add ah, bh
     83	013F  02 E7				     add ah, bh
     84
     85	0141  02 25				     add ah, byte ptr [di]
     86	0143  80 EC 30				     sub ah, '0'
     87	0146  47		     OneDigitHeight: inc di
     88	0147  E8 00A9				     call SkipSpaces
     89
     90						     ; ==============================
     91						     ; style
     92	014A  33 DB				     xor bx, bx
     93	014C  8A 1D				     mov bl, [di]
     94	014E  83 FB 2A				     cmp bx, '*'
     95	0151  74 0E				     je	short CustomStyle
     96						     ; so bl is	'0', '1', '2' or '3'
     97	0153  83 EB 30				     sub bx, '0'
     98	0156  BE 018Ar				     mov si, offset STYLE0
     99	0159  8A 9F 01B2r			     mov bl, byte ptr StyleOffsets[bx]
    100	015D  03 F3				     add si, bx
    101	015F  EB 05				     jmp short StyleEnd
    102
    103	0161  8B F7		     CustomStyle:    mov si, di
    104	0163  83 C7 0A				     add di, 10d
    105
    106	0166  47		     StyleEnd:	     inc di
    107	0167  E8 0089				     call SkipSpaces
    108
    109						     ; ==============================
    110						     ; attribute (color) byte
    111						     ; assembling color	byte in	BL
    112	016A  32 DB				     xor bl, bl
    113
    114	016C  B9 0008				     mov cx, 8d
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 3
frame.asm



    115	016F  D0 E3		     ColorLoop:	     shl bl, 1
    116	0171  8A 15				     mov dl, [di]
    117	0173  80 EA 30				     sub dl, '0'
    118	0176  02 DA				     add bl, dl
    119	0178  47				     inc di
    120	0179  E2 F4				     loop ColorLoop
    121
    122						     ; putting color byte into its
    123						     ; place in	the chosen style
    124	017B  88 1C				     mov byte ptr [si],	bl
    125
    126						     ; ==============================
    127						     ; header and text
    128
    129						     ; end of text is already marked
    130
    131	017D  E8 0073				     call SkipSpaces
    132
    133						     ; sure it is text
    134	0180  8B DF				     mov bx, di
    135
    136						     ; ==============================
    137						     ; ==============================
    138	0182  E8 0077				     call DrawFrame
    139
    140						     ; ==============================
    141						     ; ==============================
    142						     ; end
    143	0185  B8 4C13				     mov ax, 4c13h
    144	0188  CD 21				     int 21h
    145
    146	018A  4E 41 42 43 44 45	46+  Style0 db 01001110b, 'ABCDEFGHI'
    147	      47 48 49
    148	0194  4E 2B 2D 2B 7C 20	7C+  Style1 db 01001110b, '+-+|	|+-+'
    149	      2B 2D 2B
    150	019E  4E 20 20 20 20 20	20+  Style2 db 01001110b, '	    '
    151	      20 20 20
    152	01A8  4E C9 CD BB BA 20	BA+  Style3 db 01001110b, 'ÉÍ»º	ºÈÍ¼'
    153	      C8 CD BC
    154
    155	01B2  00 0A 14 1E	     StyleOffsets db 0d, 10d, 20d, 30d
    156
    157	01B6  48 65 61 64 65 72	5C+  Text   db 'Header\n\nHello!\nSeco\\nd\n\nThird', 0FFh
    158	      6E 5C 6E 48 65 6C	6C+
    159	      6F 21 5C 6E 53 65	63+
    160	      6F 5C 5C 6E 64 5C	6E+
    161	      5C 6E 54 68 69 72	64+
    162	      FF
    163	01DA  46 69 72 73 74 5C	6E+  TestText db 'First\nSeco\\nd\n\nThird', 0FFh
    164	      53 65 63 6F 5C 5C	6E+
    165	      64 5C 6E 5C 6E 54	68+
    166	      69 72 64 FF
    167
    168				     ; ===========================================================
    169				     ; A small helping function, which increments DI while
    170				     ; [DI] != ' '.
    171				     ; ===========================================================
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 4
frame.asm



    172	01F3			     SkipSpaces	     proc
    173
    174	01F3  EB 01				     jmp short SkipSpacesCnd
    175	01F5  47		     SkipSpacesLoop: inc di
    176	01F6  80 3D 20		     SkipSpacesCnd:  cmp byte ptr [di],	' '
    177	01F9  74 FA				     je	SkipSpacesLoop
    178
    179	01FB  C3				     ret
    180	01FC					     endp
    181				     ; ===========================================================
    182
    183				     include DrFrm.asm
1   184				     .DrFrmNewLine   macro
1   185						     nop
1   186						     add di, DRFRM_SCREEN_W * 2	; next line:
1   187						     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1   188						     mov dl, al
1   189						     add dl, al
1   190						     sub di, dx
1   191						     nop
1   192						     endm
1   193
1   194				     ; ===================================================
1   195				     ; DrawFrame
1   196				     ; Description:
1   197				     ;	 Draws a frame in videomem.
1   198				     ; Args:
1   199				     ;	 - AL:	     Width
1   200				     ;	 - AH:	     Height
1   201				     ;	 - DS:[SI]:  Address of	string,	containing frame
1   202				     ;		     symbols and attribute byte	(see ***)
1   203				     ;	 - DS:[BX]:  Address of	string,	containing
1   204				     ;		     header and	text as	follows:
1   205				     ;		     'header\n\ntext', with byte 0FFh in
1   206				     ;		     the end. '\\' in header or	in text
1   207				     ;		     means single '\', '\n' in text means
1   208				     ;		     new line.
1   209				     ; ***:
1   210				     ;	 Starts	with the attribute byte, followed by 9
1   211				     ;	 bytes with symbols, used for frame. Example:
1   212				     ;
1   213				     ;	 Bytes:
1   214				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
1   215				     ;	 Corresponding symbols:
1   216				     ;	 A   B	 C   D	 E   F	 G   H	 I
1   217				     ;
1   218				     ;	 Frame will be drawn in	the following way:
1   219				     ;
1   220				     ;	 AB......BC
1   221				     ;	 DE......EF
1   222				     ;	 ..........
1   223				     ;	 DE......EF
1   224				     ;	 GH......HI
1   225				     ;
1   226				     ;	 So, this string must contain 10 bytes.
1   227				     ; Attention:
1   228				     ;	 All args must have sensible values, otherwise UB.
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 5
frame.asm



1   229				     ; DESTROYS:
1   230				     ;	 CX, SI, DI, DX
1   231				     ; Changes:
1   232				     ;	 ES = 0b800h
1   233				     ; ===================================================
1   234	01FC			     DrawFrame	     proc
1   235	      =0050		     DRFRM_SCREEN_W  equ 80d
1   236	      =0019		     DRFRM_SCREEN_H  equ 25d
1   237
1   238	      =	':>>:'		     DRFRM_TEXT_SEP  equ ':>>:'
1   239
1   240						     ; ====================================
1   241						     ; moving style bytes to DrFrmData
1   242
1   243	01FC  BF 0282r				     mov di, offset DRFRMDATA
1   244	01FF  8A 34				     mov dh, [si] ; dh = attribute byte
1   245	0201  46				     inc si ; [si] -> byte_A
1   246
1   247	0202  B9 0009				     mov cx, 9d
1   248	0205  8A 14		     DrFrmDatLoop:   mov dl, [si]
1   249	0207  88 15				     mov [di], dl
1   250	0209  88 75 01				     mov [di + 1], dh
1   251	020C  46				     inc si
1   252	020D  83 C7 02				     add di, 2d
1   253	0210  E2 F3				     loop DrFrmDatLoop
1   254
1   255	0212  BE 0282r				     mov si, offset DRFRMDATA
1   256
1   257						     ; ====================================
1   258						     ; computing into DI address of the	A
1   259
1   260						     ; cl = col	= (screen_w - w) / 2
1   261	0215  8A C8				     mov cl, al
1   262	0217  80 E9 50				     sub cl, DRFRM_SCREEN_W
1   263	021A  F6 D9				     neg cl
1   264	021C  D0 E9				     shr cl, 1
1   265
1   266						     ; ch = row	= (screen_h - h) / 2
1   267	021E  8A EC				     mov ch, ah
1   268	0220  80 ED 19				     sub ch, DRFRM_SCREEN_H
1   269	0223  F6 DD				     neg ch
1   270	0225  D0 ED				     shr ch, 1
1   271
1   272						     ; saving for printing header and text a lot later
1   273	0227  51				     push cx
1   274
1   275						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
1   276						     ; ASSUMING	DRFRM_SCREEN_W = 80
1   277	0228  33 FF				     xor di, di
1   278	022A  50				     push ax ; saving
1   279
1   280	022B  33 C0				     xor ax, ax
1   281	022D  8A C5				     mov al, ch
1   282	022F  BA 0050				     mov dx, 80d
1   283	0232  F6 E2				     mul dl
1   284
1   285	0234  03 F8				     add di, ax
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 6
frame.asm



1   286
1   287	0236  8A D1				     mov dl, cl
1   288	0238  03 FA				     add di, dx
1   289
1   290	023A  D1 E7				     shl di, 1
1   291
1   292						     ; while ax	is free...
1   293	023C  B8 B800				     mov ax, 0B800h
1   294	023F  8E C0				     mov es, ax
1   295
1   296	0241  58				     pop ax
1   297
1   298						     ; ====================================
1   299						     ; drawing top line
1   300
1   301	0242  E8 004F				     call DrawHorLine
1   302
1   303						     ; ====================================
1   304						     ; drawing middle line(s)
1   305
1   306						     .DrFrmNewLine
2   307	0245  90				     nop
2   308	0246  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   309	024A  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   310	024C  8A D0				     mov dl, al
2   311	024E  02 D0				     add dl, al
2   312	0250  2B FA				     sub di, dx
2   313	0252  90				     nop
1   314
1   315	0253  33 C9				     xor cx, cx	; cx = height -	2
1   316	0255  8A CC				     mov cl, ah
1   317	0257  83 E9 02				     sub cx, 2h
1   318	025A			     DrFrmMLOutLoop:
1   319	025A  51				     push cx ; saving outter loop cnt
1   320
1   321	025B  E8 0036				     call DrawHorLine
1   322
1   323						     .DrFrmNewLine
2   324	025E  90				     nop
2   325	025F  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   326	0263  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   327	0265  8A D0				     mov dl, al
2   328	0267  02 D0				     add dl, al
2   329	0269  2B FA				     sub di, dx
2   330	026B  90				     nop
1   331
1   332	026C  83 EE 06				     sub si, 6d	 ; returning back to D
1   333
1   334	026F  59				     pop cx ; ressurecting outter loop cnt
1   335	0270  E2 E8				     loop DrFrmMLOutLoop
1   336
1   337						     ; ====================================
1   338						     ; drawing bottom line
1   339
1   340	0272  83 C6 06				     add si, 6d	 ; setting to G
1   341
1   342	0275  E8 001C				     call DrawHorLine
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 7
frame.asm



1   343
1   344						     ; ====================================
1   345						     ; print header and	text
1   346
1   347	0278  8B F3				     mov si, bx
1   348	027A  5B				     pop bx  ; bx = row	(bh) and col (bl) of
1   349							     ; the first symbol	in frame (A)
1   350
1   351	027B  80 C3 02				     add bl, 2d	 ; one space between borders
1   352								 ; and text
1   353
1   354	027E  E8 0026				     call PrintText
1   355
1   356						     ; ====================================
1   357						     ; end
1   358	0281  C3				     ret
1   359
1   360				     ; is filled with all frame	symbols
1   361				     ; and attribute bytes (#) to simplify some	code
1   362	0282  12*(??)		     DrFrmData	     db	18 DUP(?)
1   363				     ;			A # B #	... I #
1   364
1   365	0294					     endp
1   366				     ; ===================================================
1   367
1   368				     ; ===================================================
1   369				     ; DrawHorLine
1   370				     ; Description:
1   371				     ;	 Helping function DrawFrame. Not for using on its
1   372				     ;	 own.
1   373				     ; Assumes:
1   374				     ;	 - ES =	0B800h
1   375				     ;	 - DI points at	the place for the first	symbol.
1   376				     ;	 - SI points at	A, D or	G
1   377				     ;	 - Width of the	line in	AL
1   378				     ; DESTROYS:
1   379				     ;	 CX
1   380				     ; Outcome:
1   381				     ;	 - SI points at	the next left bound symbol
1   382				     ;	 - DI points at	the byte right after the last
1   383				     ;	 byte of the drawn line.
1   384				     ;
1   385				     ; ===================================================
1   386	0294			     DrawHorLine     proc
1   387
1   388	0294  A5				     movsw   ; Left bound symb (A, D or	G)
1   389
1   390						     ; Inner symb (B, E	or H)
1   391	0295  33 C9				     xor cx, cx
1   392	0297  8A C8				     mov cl, al	; cx = w
1   393	0299  83 E9 02				     sub cx, 2h	; without boundary symbols
1   394	029C  A5		     DrHorLineLoop:  movsw
1   395	029D  83 EE 02				     sub si, 2h
1   396	02A0  E2 FA				     loop DrHorLineLoop
1   397	02A2  83 C6 02				     add si, 2h
1   398
1   399	02A5  A5				     movsw   ; Right bound symb	(C, F or I)
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 8
frame.asm



1   400
1   401	02A6  C3				     ret
1   402	02A7					     endp
1   403				     ; ===================================================
1   404
    405				     include PrnText.asm
1   406				     ; ===================================================
1   407				     ; PrintText
1   408				     ; Description:
1   409				     ;	 Prints	given string of	text into the videomem
1   410				     ;	 according to the following rules:
1   411				     ;	 - '\n'	is interpreted as a command to go onto a
1   412				     ;	 new line. New line starts in the same column, as
1   413				     ;	 the first symbol (see args), one row lower.
1   414				     ;	 - '\\'	is printed as a	single '\'.
1   415				     ;	 - Single '\' followed by any symbol other than	'n'
1   416				     ;	 is UB!
1   417				     ;	 - The whole string must end with byte FFh.
1   418				     ;	 - UB if length	of one line exceeds screen width.
1   419				     ;	 - Attribute bytes don't change.
1   420				     ; Args:
1   421				     ;	 - DS:[SI] pointing at the beginning of	the string.
1   422				     ;	 - BL -	Col number of the first	symbol.
1   423				     ;	 - BH -	Row number of the first	symbol.
1   424				     ; Assumes:
1   425				     ;	 ES = 0b800h
1   426				     ; DESTROYS:
1   427				     ;	 AX, CX, DI, BH, DX
1   428				     ; Attention:
1   429				     ;	 All args must have sensible values, otherwise UB.
1   430				     ; ===================================================
1   431	02A7			     PrintText	     proc
1   432
1   433	      =0050		     PrnTextScreenW  equ 80d
1   434
1   435	      =005C		     ByteCtrl	     equ 5Ch	 ; '\'
1   436	      =006E		     ByteNewLine     equ 'n'
1   437	      =00FF		     ByteStrEnd	     equ 0FFh
1   438
1   439						     ; ===================================
1   440						     ; computing offset	in the videomem
1   441						     ; of the first symbol into	DI
1   442
1   443						     ; AX = row	* 80d =	Bh * 80d
1   444	02A7  33 C0				     xor ax, ax
1   445	02A9  8A C7				     mov al, bh
1   446	02AB  B9 0050				     mov cx, 80d
1   447	02AE  F7 E1				     mul cx
1   448
1   449	02B0  8B F8				     mov di, ax	 ; DI =	row*80
1   450
1   451	02B2  33 C0				     xor ax, ax
1   452	02B4  8A C3				     mov al, bl	 ; AX =	Bl
1   453	02B6  03 F8				     add di, ax	 ; DI += col
1   454
1   455	02B8  D1 E7				     shl di, 1	    ; di*=2
1   456
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 9
frame.asm



1   457						     ; remembering offset of the first
1   458						     ; symbol in the line
1   459	02BA  8B D7				     mov dx, di
1   460
1   461						     ; ===================================
1   462						     ; printing	the string
1   463
1   464	02BC  8A 04		     PrnStrLoop:     mov al, [si]    ; al = current symbol
1   465
1   466	02BE  3C FF				     cmp al, BYTESTREND
1   467	02C0  74 1F				     je	PrnStrFinal
1   468
1   469	02C2  3C 5C				     cmp al, BYTECTRL
1   470	02C4  75 16				     jne PrnStrCommmon
1   471	02C6  46				     inc si
1   472	02C7  8A 24				     mov ah, [si]
1   473	02C9  80 FC 5C				     cmp ah, BYTECTRL
1   474	02CC  74 0E				     je	PrnStrCommmon
1   475	02CE  80 FC 6E				     cmp ah, BYTENEWLINE
1   476	02D1  75 0E				     jne PRNSTRFINAL
1   477
1   478	02D3  46				     inc si
1   479						     ; new line
1   480	02D4  81 C2 00A0			     add dx, PrnTextScreenW * 2
1   481	02D8  8B FA				     mov di, dx
1   482
1   483	02DA  EB E0				     jmp PrnStrLoop
1   484
1   485	02DC  AA		     PrnStrCommmon:  stosb
1   486	02DD  47				     inc di  ; passing over attribute byte
1   487	02DE  46				     inc si
1   488	02DF  EB DB				     jmp PrnStrLoop
1   489	02E1			     PrnStrFinal:
1   490	02E1  C3				     ret
1   491	02E2					     endp
1   492				     ; ===================================================
1   493
    494
    495				     end	 Start
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/17/24"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "21:51:37"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BYTECTRL			  Number 005C
BYTENEWLINE			  Number 006E
BYTESTREND			  Number 00FF
COLORLOOP			  Near	 DGROUP:016F
CUSTOMSTYLE			  Near	 DGROUP:0161
DRAWFRAME			  Near	 DGROUP:01FC
DRAWHORLINE			  Near	 DGROUP:0294
DRFRMDATA			  Byte	 DGROUP:0282
DRFRMDATLOOP			  Near	 DGROUP:0205
DRFRMMLOUTLOOP			  Near	 DGROUP:025A
DRFRM_SCREEN_H			  Number 0019
DRFRM_SCREEN_W			  Number 0050
DRFRM_TEXT_SEP			  Text	 ':>>:'
DRHORLINELOOP			  Near	 DGROUP:029C
ONEDIGITHEIGHT			  Near	 DGROUP:0146
ONEDIGITWIDTH			  Near	 DGROUP:0129
PRINTTEXT			  Near	 DGROUP:02A7
PRNSTRCOMMMON			  Near	 DGROUP:02DC
PRNSTRFINAL			  Near	 DGROUP:02E1
PRNSTRLOOP			  Near	 DGROUP:02BC
PRNTEXTSCREENW			  Number 0050
SKIPSPACES			  Near	 DGROUP:01F3
SKIPSPACESCND			  Near	 DGROUP:01F6
SKIPSPACESLOOP			  Near	 DGROUP:01F5
START				  Near	 DGROUP:0100
STYLE0				  Byte	 DGROUP:018A
STYLE1				  Byte	 DGROUP:0194
STYLE2				  Byte	 DGROUP:019E
STYLE3				  Byte	 DGROUP:01A8
STYLEEND			  Near	 DGROUP:0166
STYLEOFFSETS			  Byte	 DGROUP:01B2
TESTTEXT			  Byte	 DGROUP:01DA
TEXT				  Byte	 DGROUP:01B6
Turbo Assembler	 Version 4.1	    02/17/24 21:51:37	    Page 11
Symbol Table




Macro Name

.DRFRMNEWLINE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02E2 Word	  Public  CODE
