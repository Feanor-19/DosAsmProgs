Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 1
frame.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5
      6	0100			     Start:
      7						 COMMENT #
      8						 mov al, 20d
      9						 mov ah, 8d
     10						 mov si, offset	STYLE2
     11						 mov bx, offset	Text
     12
     13						 call DrawFrame
     14						 #
     15
     16
     17						 ; print str test
     18	0100  B8 B800				 mov ax, 0B800h
     19	0103  8E C0				 mov es, ax
     20	0105  BE 014Br				 mov si, offset	TestText
     21	0108  B3 02				 mov bl, 2d
     22	010A  B7 03				 mov bh, 3d
     23	010C  E8 00F6				 call PrintText
     24
     25
     26
     27						 ; ==============
     28						 ; end
     29	010F  B8 4C13				 mov ax, 4c13h
     30	0112  CD 21				 int 21h
     31
     32	0114  4E 41 42 43 44 45	46+  Style1 db 01001110b, 'ABCDEFGHI'
     33	      47 48 49
     34	011E  4E 2B 2D 2B 7C 20	7C+  Style2 db 01001110b, '+-+|	|+-+'
     35	      2B 2D 2B
     36	0128  4E 20 20 20 20 20	20+  Style3 db 01001110b, '	    '
     37	      20 20 20
     38	0132  4E C9 CD BB BA 20	BA+  Style4 db 01001110b, 'ÉÍ»º	ºÈÍ¼'
     39	      C8 CD BC
     40
     41	013C  48 65 61 64 65 72	3A+  Text   db 'Header:	Hello!$'
     42	      20 48 65 6C 6C 6F	21+
     43	      24
     44	014B  46 69 72 73 74 2F	6E+  TestText db 'First/nSeco//nd/n/nThird', 0FFh
     45	      53 65 63 6F 2F 2F	6E+
     46	      64 2F 6E 2F 6E 54	68+
     47	      69 72 64 FF
     48
     49				     include DrFrm.asm
1    50				     .DrFrmNewLine   macro
1    51						     nop
1    52						     add di, DRFRM_SCREEN_W * 2	; next line:
1    53						     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1    54						     mov dl, al
1    55						     add dl, al
1    56						     sub di, dx
1    57						     nop
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 2
frame.asm



1    58						     endm
1    59
1    60				     ; ===================================================
1    61				     ; DrawFrame
1    62				     ; Description:
1    63				     ;	 Draws a frame in videomem.
1    64				     ; Args:
1    65				     ;	 - AL:	     Width
1    66				     ;	 - AH:	     Height
1    67				     ;	 - DS:[SI]:  Address of	string,	containing frame
1    68				     ;		     symbols and attribute byte	(see ***)
1    69				     ;	 - DS:[BX]:  Address of	string,	containing
1    70				     ;		     header and	text as	follows:
1    71				     ;		     'header: text$'. '$' means	end.
1    72				     ; ***:
1    73				     ;	 Starts	with the attribute byte, followed by 9
1    74				     ;	 bytes with symbols, used for frame. Example:
1    75				     ;
1    76				     ;	 Bytes:
1    77				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
1    78				     ;	 Corresponding symbols:
1    79				     ;	 A   B	 C   D	 E   F	 G   H	 I
1    80				     ;
1    81				     ;	 Frame will be drawn in	the following way:
1    82				     ;
1    83				     ;	 AB......BC
1    84				     ;	 DE......EF
1    85				     ;	 ..........
1    86				     ;	 DE......EF
1    87				     ;	 GH......HI
1    88				     ;
1    89				     ;	 So, this string must contain 10 bytes.
1    90				     ; Attention:
1    91				     ;	 All args must have sensible values, otherwise UB.
1    92				     ; DESTROYS:
1    93				     ;	 CX, SI, DI, DX
1    94				     ; Changes:
1    95				     ;	 ES = 0b800h
1    96				     ; ===================================================
1    97	0164			     DrawFrame	     proc
1    98	      =0050		     DRFRM_SCREEN_W  equ 80d
1    99	      =0019		     DRFRM_SCREEN_H  equ 25d
1   100
1   101	      =0000		     BYTE_ATTR	     equ 0d
1   102	      =0001		     BYTE_A	     equ 1d
1   103	      =0002		     BYTE_B	     equ 2d
1   104	      =0003		     BYTE_C	     equ 3d
1   105	      =0004		     BYTE_D	     equ 4d
1   106	      =0005		     BYTE_E	     equ 5d
1   107	      =0006		     BYTE_F	     equ 6d
1   108	      =0007		     BYTE_G	     equ 7d
1   109	      =0008		     BYTE_H	     equ 8d
1   110	      =0009		     BYTE_I	     equ 9d
1   111
1   112						     ; ====================================
1   113						     ; moving style bytes to DrFrmData
1   114
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 3
frame.asm



1   115	0164  BF 01E0r				     mov di, offset DRFRMDATA
1   116	0167  8A 34				     mov dh, [si] ; dh = attribute byte
1   117	0169  46				     inc si ; [si] -> byte_A
1   118
1   119	016A  B9 0009				     mov cx, 9d
1   120	016D  8A 14		     DrFrmDatLoop:   mov dl, [si]
1   121	016F  88 15				     mov [di], dl
1   122	0171  88 75 01				     mov [di + 1], dh
1   123	0174  46				     inc si
1   124	0175  83 C7 02				     add di, 2d
1   125	0178  E2 F3				     loop DrFrmDatLoop
1   126
1   127	017A  BE 01E0r				     mov si, offset DRFRMDATA
1   128
1   129						     ; ====================================
1   130						     ; computing into DI address of the	A
1   131
1   132						     ; cl = col	= (screen_w - w) / 2
1   133	017D  8A C8				     mov cl, al
1   134	017F  80 E9 50				     sub cl, DRFRM_SCREEN_W
1   135	0182  F6 D9				     neg cl
1   136	0184  D0 E9				     shr cl, 1
1   137
1   138						     ; ch = row	= (screen_h - h) / 2
1   139	0186  8A EC				     mov ch, ah
1   140	0188  80 ED 19				     sub ch, DRFRM_SCREEN_H
1   141	018B  F6 DD				     neg ch
1   142	018D  D0 ED				     shr ch, 1
1   143
1   144						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
1   145						     ; ASSUMING	DRFRM_SCREEN_W = 80
1   146	018F  33 FF				     xor di, di
1   147	0191  50				     push ax ; saving
1   148
1   149	0192  33 C0				     xor ax, ax
1   150	0194  8A C5				     mov al, ch
1   151	0196  BA 0050				     mov dx, 80d
1   152	0199  F6 E2				     mul dl
1   153
1   154	019B  03 F8				     add di, ax
1   155
1   156	019D  8A D1				     mov dl, cl
1   157	019F  03 FA				     add di, dx
1   158
1   159	01A1  D1 E7				     shl di, 1
1   160
1   161						     ; while ax	is free...
1   162	01A3  B8 B800				     mov ax, 0B800h
1   163	01A6  8E C0				     mov es, ax
1   164
1   165	01A8  58				     pop ax
1   166
1   167						     ; ====================================
1   168						     ; drawing top line
1   169
1   170	01A9  E8 0046				     call DrawHorLine
1   171
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 4
frame.asm



1   172						     ; ====================================
1   173						     ; drawing middle line(s)
1   174
1   175						     .DrFrmNewLine
2   176	01AC  90				     nop
2   177	01AD  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   178	01B1  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   179	01B3  8A D0				     mov dl, al
2   180	01B5  02 D0				     add dl, al
2   181	01B7  2B FA				     sub di, dx
2   182	01B9  90				     nop
1   183
1   184	01BA  33 C9				     xor cx, cx	; cx = height -	2
1   185	01BC  8A CC				     mov cl, ah
1   186	01BE  83 E9 02				     sub cx, 2h
1   187	01C1			     DrFrmMLOutLoop:
1   188	01C1  51				     push cx ; saving outter loop cnt
1   189
1   190	01C2  E8 002D				     call DrawHorLine
1   191
1   192						     .DrFrmNewLine
2   193	01C5  90				     nop
2   194	01C6  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   195	01CA  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   196	01CC  8A D0				     mov dl, al
2   197	01CE  02 D0				     add dl, al
2   198	01D0  2B FA				     sub di, dx
2   199	01D2  90				     nop
1   200
1   201	01D3  83 EE 06				     sub si, 6d	 ; returning back to D
1   202
1   203	01D6  59				     pop cx ; ressurecting outter loop cnt
1   204	01D7  E2 E8				     loop DrFrmMLOutLoop
1   205
1   206						     ; ====================================
1   207						     ; drawing bottom line
1   208
1   209	01D9  83 C6 06				     add si, 6d	 ; setting to G
1   210
1   211	01DC  E8 0013				     call DrawHorLine
1   212
1   213						     ; ====================================
1   214						     ; end
1   215	01DF  C3				     ret
1   216
1   217				     ; is filled with all frame	symbols
1   218				     ; and attribute bytes (#) to simplify some	code
1   219	01E0  12*(??)		     DrFrmData	     db	18 DUP(?)
1   220				     ;			A # B #	... I #
1   221
1   222	01F2					     endp
1   223				     ; ===================================================
1   224
1   225				     ; ===================================================
1   226				     ; DrawHorLine
1   227				     ; Description:
1   228				     ;	 Helping function DrawFrame. Not for using on its
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 5
frame.asm



1   229				     ;	 own.
1   230				     ; Assumes:
1   231				     ;	 - SI points at	A, D or	G
1   232				     ;	 - Width of the	line in	AL
1   233				     ; DESTROYS:
1   234				     ;	 CX
1   235				     ; Outcome:
1   236				     ;	 - SI points at	the next left bound symbol
1   237				     ;	 - DI points at	the byte right after the last
1   238				     ;	 byte of the drawn line.
1   239				     ;
1   240				     ; ===================================================
1   241	01F2			     DrawHorLine     proc
1   242
1   243	01F2  A5				     movsw   ; Left bound symb (A, D or	G)
1   244
1   245						     ; Inner symb (B, E	or H)
1   246	01F3  33 C9				     xor cx, cx
1   247	01F5  8A C8				     mov cl, al	; cx = w
1   248	01F7  83 E9 02				     sub cx, 2h	; without boundary symbols
1   249	01FA  A5		     DrHorLineLoop:  movsw
1   250	01FB  83 EE 02				     sub si, 2h
1   251	01FE  E2 FA				     loop DrHorLineLoop
1   252	0200  83 C6 02				     add si, 2h
1   253
1   254	0203  A5				     movsw   ; Right bound symb	(C, F or I)
1   255
1   256	0204  C3				     ret
1   257	0205					     endp
1   258				     ; ===================================================
1   259
    260				     include PrnText.asm
1   261				     ; ===================================================
1   262				     ; PrintText
1   263				     ; Description:
1   264				     ;	 Prints	given string of	text into the videomem
1   265				     ;	 according to the following rules:
1   266				     ;	 - '/n'	is interpreted as a command to go onto a
1   267				     ;	 new line. New line starts in the same column, as
1   268				     ;	 the first symbol (see args), one row lower.
1   269				     ;	 - '//'	is printed as a	single '/'.
1   270				     ;	 - Single '/' followed by any symbol other than	'n'
1   271				     ;	 is UB!
1   272				     ;	 - The whole string must end with byte FFh.
1   273				     ;	 - UB if length	of one line exceeds screen width.
1   274				     ;	 - Attribute bytes don't change.
1   275				     ; Args:
1   276				     ;	 - DS:[SI] pointing at the beginning of	the string.
1   277				     ;	 - BL -	Row number of the first	symbol.
1   278				     ;	 - BH -	Col number of the first	symbol.
1   279				     ; Assumes:
1   280				     ;	 ES = 0b800h
1   281				     ; DESTROYS:
1   282				     ;	 AX, CX, DI, BH, DX
1   283				     ; Attention:
1   284				     ;	 All args must have sensible values, otherwise UB.
1   285				     ; ===================================================
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 6
frame.asm



1   286	0205			     PrintText	     proc
1   287
1   288	      =0050		     PrnTextScreenW  equ 80d
1   289
1   290	      =002F		     ByteCtrl	     equ '/'
1   291	      =006E		     ByteNewLine     equ 'n'
1   292	      =00FF		     ByteStrEnd	     equ 0FFh
1   293
1   294						     ; ===================================
1   295						     ; computing offset	in the videomem
1   296						     ; of the first symbol into	DI
1   297
1   298						     ; AX = row	* 80d =	BL * 80d
1   299	0205  33 C0				     xor ax, ax
1   300	0207  8A C3				     mov al, bl
1   301	0209  B9 0050				     mov cx, 80d
1   302	020C  F7 E1				     mul cx
1   303
1   304	020E  8B F8				     mov di, ax	 ; DI =	row*80
1   305
1   306	0210  33 C0				     xor ax, ax
1   307	0212  8A C7				     mov al, bh	 ; AX =	BH
1   308	0214  03 F8				     add di, ax	 ; DI += col
1   309
1   310	0216  D1 E7				     shl di, 1	    ; di*=2
1   311
1   312						     ; remembering offset of the first
1   313						     ; symbol in the line
1   314	0218  8B D7				     mov dx, di
1   315
1   316						     ; ===================================
1   317						     ; printing	the string
1   318
1   319	021A  8A 04		     PrnStrLoop:     mov al, [si]    ; al = current symbol
1   320
1   321	021C  3C FF				     cmp al, BYTESTREND
1   322	021E  74 1F				     je	PrnStrFinal
1   323
1   324	0220  3C 2F				     cmp al, BYTECTRL
1   325	0222  75 16				     jne PrnStrCommmon
1   326	0224  46				     inc si
1   327	0225  8A 24				     mov ah, [si]
1   328	0227  80 FC 2F				     cmp ah, BYTECTRL
1   329	022A  74 0E				     je	PrnStrCommmon
1   330	022C  80 FC 6E				     cmp ah, BYTENEWLINE
1   331	022F  75 0E				     jne PRNSTRFINAL
1   332
1   333	0231  46				     inc si
1   334						     ; new line
1   335	0232  81 C2 00A0			     add dx, PrnTextScreenW * 2
1   336	0236  8B FA				     mov di, dx
1   337
1   338	0238  EB E0				     jmp PrnStrLoop
1   339
1   340	023A  AA		     PrnStrCommmon:  stosb
1   341	023B  47				     inc di  ; passing over attribute byte
1   342	023C  46				     inc si
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 7
frame.asm



1   343	023D  EB DB				     jmp PrnStrLoop
1   344	023F			     PrnStrFinal:
1   345	023F  C3				     ret
1   346	0240					     endp
1   347				     ; ===================================================
1   348
    349
    350				     end	 Start
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/17/24"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "17:31:16"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BYTECTRL			  Number 002F
BYTENEWLINE			  Number 006E
BYTESTREND			  Number 00FF
BYTE_A				  Number 0001
BYTE_ATTR			  Number 0000
BYTE_B				  Number 0002
BYTE_C				  Number 0003
BYTE_D				  Number 0004
BYTE_E				  Number 0005
BYTE_F				  Number 0006
BYTE_G				  Number 0007
BYTE_H				  Number 0008
BYTE_I				  Number 0009
DRAWFRAME			  Near	 DGROUP:0164
DRAWHORLINE			  Near	 DGROUP:01F2
DRFRMDATA			  Byte	 DGROUP:01E0
DRFRMDATLOOP			  Near	 DGROUP:016D
DRFRMMLOUTLOOP			  Near	 DGROUP:01C1
DRFRM_SCREEN_H			  Number 0019
DRFRM_SCREEN_W			  Number 0050
DRHORLINELOOP			  Near	 DGROUP:01FA
PRINTTEXT			  Near	 DGROUP:0205
PRNSTRCOMMMON			  Near	 DGROUP:023A
PRNSTRFINAL			  Near	 DGROUP:023F
PRNSTRLOOP			  Near	 DGROUP:021A
PRNTEXTSCREENW			  Number 0050
START				  Near	 DGROUP:0100
STYLE1				  Byte	 DGROUP:0114
STYLE2				  Byte	 DGROUP:011E
STYLE3				  Byte	 DGROUP:0128
STYLE4				  Byte	 DGROUP:0132
TESTTEXT			  Byte	 DGROUP:014B
TEXT				  Byte	 DGROUP:013C
Turbo Assembler	 Version 4.1	    02/17/24 17:31:16	    Page 9
Symbol Table




Macro Name

.DRFRMNEWLINE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0240 Word	  Public  CODE
