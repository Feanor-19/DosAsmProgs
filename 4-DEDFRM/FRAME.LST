Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 1
frame.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5
      6	0100			     Start:
      7	0100  B0 14				 mov al, 20d
      8	0102  B4 08				 mov ah, 8d
      9	0104  BE 011Cr				 mov si, offset	STYLE2
     10	0107  BB 013Ar				 mov bx, offset	Text
     11
     12	010A  E8 006A				 call DrawFrame
     13
     14						 ; ==============
     15						 ; end
     16	010D  B8 4C13				 mov ax, 4c13h
     17	0110  CD 21				 int 21h
     18
     19	0112  4E 41 42 43 44 45	46+  Style1 db 01001110b, 'ABCDEFGHI'
     20	      47 48 49
     21	011C  4E 2B 2D 2B 7C 20	7C+  Style2 db 01001110b, '+-+|	|+-+'
     22	      2B 2D 2B
     23	0126  4E 20 20 20 20 20	20+  Style3 db 01001110b, '	    '
     24	      20 20 20
     25	0130  4E C9 CD BB BA 20	BA+  Style4 db 01001110b, 'ÉÍ»º	ºÈÍ¼'
     26	      C8 CD BC
     27
     28	013A  48 65 61 64 65 72	5C+  Text   db 'Header\n\nHello!\nSeco\\nd\n\nThird', 0FFh
     29	      6E 5C 6E 48 65 6C	6C+
     30	      6F 21 5C 6E 53 65	63+
     31	      6F 5C 5C 6E 64 5C	6E+
     32	      5C 6E 54 68 69 72	64+
     33	      FF
     34	015E  46 69 72 73 74 5C	6E+  TestText db 'First\nSeco\\nd\n\nThird', 0FFh
     35	      53 65 63 6F 5C 5C	6E+
     36	      64 5C 6E 5C 6E 54	68+
     37	      69 72 64 FF
     38
     39				     include DrFrm.asm
1    40				     .DrFrmNewLine   macro
1    41						     nop
1    42						     add di, DRFRM_SCREEN_W * 2	; next line:
1    43						     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1    44						     mov dl, al
1    45						     add dl, al
1    46						     sub di, dx
1    47						     nop
1    48						     endm
1    49
1    50				     ; ===================================================
1    51				     ; DrawFrame
1    52				     ; Description:
1    53				     ;	 Draws a frame in videomem.
1    54				     ; Args:
1    55				     ;	 - AL:	     Width
1    56				     ;	 - AH:	     Height
1    57				     ;	 - DS:[SI]:  Address of	string,	containing frame
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 2
frame.asm



1    58				     ;		     symbols and attribute byte	(see ***)
1    59				     ;	 - DS:[BX]:  Address of	string,	containing
1    60				     ;		     header and	text as	follows:
1    61				     ;		     'header\n\ntext', with byte 0FFh in
1    62				     ;		     the end. '\\' in header or	in text
1    63				     ;		     means single '\', '\n' in text means
1    64				     ;		     new line.
1    65				     ; ***:
1    66				     ;	 Starts	with the attribute byte, followed by 9
1    67				     ;	 bytes with symbols, used for frame. Example:
1    68				     ;
1    69				     ;	 Bytes:
1    70				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
1    71				     ;	 Corresponding symbols:
1    72				     ;	 A   B	 C   D	 E   F	 G   H	 I
1    73				     ;
1    74				     ;	 Frame will be drawn in	the following way:
1    75				     ;
1    76				     ;	 AB......BC
1    77				     ;	 DE......EF
1    78				     ;	 ..........
1    79				     ;	 DE......EF
1    80				     ;	 GH......HI
1    81				     ;
1    82				     ;	 So, this string must contain 10 bytes.
1    83				     ; Attention:
1    84				     ;	 All args must have sensible values, otherwise UB.
1    85				     ; DESTROYS:
1    86				     ;	 CX, SI, DI, DX
1    87				     ; Changes:
1    88				     ;	 ES = 0b800h
1    89				     ; ===================================================
1    90	0177			     DrawFrame	     proc
1    91	      =0050		     DRFRM_SCREEN_W  equ 80d
1    92	      =0019		     DRFRM_SCREEN_H  equ 25d
1    93
1    94	      =	':>>:'		     DRFRM_TEXT_SEP  equ ':>>:'
1    95
1    96						     ; ====================================
1    97						     ; moving style bytes to DrFrmData
1    98
1    99	0177  BF 01FDr				     mov di, offset DRFRMDATA
1   100	017A  8A 34				     mov dh, [si] ; dh = attribute byte
1   101	017C  46				     inc si ; [si] -> byte_A
1   102
1   103	017D  B9 0009				     mov cx, 9d
1   104	0180  8A 14		     DrFrmDatLoop:   mov dl, [si]
1   105	0182  88 15				     mov [di], dl
1   106	0184  88 75 01				     mov [di + 1], dh
1   107	0187  46				     inc si
1   108	0188  83 C7 02				     add di, 2d
1   109	018B  E2 F3				     loop DrFrmDatLoop
1   110
1   111	018D  BE 01FDr				     mov si, offset DRFRMDATA
1   112
1   113						     ; ====================================
1   114						     ; computing into DI address of the	A
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 3
frame.asm



1   115
1   116						     ; cl = col	= (screen_w - w) / 2
1   117	0190  8A C8				     mov cl, al
1   118	0192  80 E9 50				     sub cl, DRFRM_SCREEN_W
1   119	0195  F6 D9				     neg cl
1   120	0197  D0 E9				     shr cl, 1
1   121
1   122						     ; ch = row	= (screen_h - h) / 2
1   123	0199  8A EC				     mov ch, ah
1   124	019B  80 ED 19				     sub ch, DRFRM_SCREEN_H
1   125	019E  F6 DD				     neg ch
1   126	01A0  D0 ED				     shr ch, 1
1   127
1   128						     ; saving for printing header and text a lot later
1   129	01A2  51				     push cx
1   130
1   131						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
1   132						     ; ASSUMING	DRFRM_SCREEN_W = 80
1   133	01A3  33 FF				     xor di, di
1   134	01A5  50				     push ax ; saving
1   135
1   136	01A6  33 C0				     xor ax, ax
1   137	01A8  8A C5				     mov al, ch
1   138	01AA  BA 0050				     mov dx, 80d
1   139	01AD  F6 E2				     mul dl
1   140
1   141	01AF  03 F8				     add di, ax
1   142
1   143	01B1  8A D1				     mov dl, cl
1   144	01B3  03 FA				     add di, dx
1   145
1   146	01B5  D1 E7				     shl di, 1
1   147
1   148						     ; while ax	is free...
1   149	01B7  B8 B800				     mov ax, 0B800h
1   150	01BA  8E C0				     mov es, ax
1   151
1   152	01BC  58				     pop ax
1   153
1   154						     ; ====================================
1   155						     ; drawing top line
1   156
1   157	01BD  E8 004F				     call DrawHorLine
1   158
1   159						     ; ====================================
1   160						     ; drawing middle line(s)
1   161
1   162						     .DrFrmNewLine
2   163	01C0  90				     nop
2   164	01C1  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   165	01C5  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   166	01C7  8A D0				     mov dl, al
2   167	01C9  02 D0				     add dl, al
2   168	01CB  2B FA				     sub di, dx
2   169	01CD  90				     nop
1   170
1   171	01CE  33 C9				     xor cx, cx	; cx = height -	2
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 4
frame.asm



1   172	01D0  8A CC				     mov cl, ah
1   173	01D2  83 E9 02				     sub cx, 2h
1   174	01D5			     DrFrmMLOutLoop:
1   175	01D5  51				     push cx ; saving outter loop cnt
1   176
1   177	01D6  E8 0036				     call DrawHorLine
1   178
1   179						     .DrFrmNewLine
2   180	01D9  90				     nop
2   181	01DA  81 C7 00A0			     add di, DRFRM_SCREEN_W * 2	; next line:
2   182	01DE  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   183	01E0  8A D0				     mov dl, al
2   184	01E2  02 D0				     add dl, al
2   185	01E4  2B FA				     sub di, dx
2   186	01E6  90				     nop
1   187
1   188	01E7  83 EE 06				     sub si, 6d	 ; returning back to D
1   189
1   190	01EA  59				     pop cx ; ressurecting outter loop cnt
1   191	01EB  E2 E8				     loop DrFrmMLOutLoop
1   192
1   193						     ; ====================================
1   194						     ; drawing bottom line
1   195
1   196	01ED  83 C6 06				     add si, 6d	 ; setting to G
1   197
1   198	01F0  E8 001C				     call DrawHorLine
1   199
1   200						     ; ====================================
1   201						     ; print header and	text
1   202
1   203	01F3  8B F3				     mov si, bx
1   204	01F5  5B				     pop bx  ; bx = row	(bh) and col (bl) of
1   205							     ; the first symbol	in frame (A)
1   206
1   207	01F6  80 C3 02				     add bl, 2d	 ; one space between borders
1   208								 ; and text
1   209
1   210	01F9  E8 0026				     call PrintText
1   211
1   212						     ; ====================================
1   213						     ; end
1   214	01FC  C3				     ret
1   215
1   216				     ; is filled with all frame	symbols
1   217				     ; and attribute bytes (#) to simplify some	code
1   218	01FD  12*(??)		     DrFrmData	     db	18 DUP(?)
1   219				     ;			A # B #	... I #
1   220
1   221	020F					     endp
1   222				     ; ===================================================
1   223
1   224				     ; ===================================================
1   225				     ; DrawHorLine
1   226				     ; Description:
1   227				     ;	 Helping function DrawFrame. Not for using on its
1   228				     ;	 own.
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 5
frame.asm



1   229				     ; Assumes:
1   230				     ;	 - ES =	0B800h
1   231				     ;	 - DI points at	the place for the first	symbol.
1   232				     ;	 - SI points at	A, D or	G
1   233				     ;	 - Width of the	line in	AL
1   234				     ; DESTROYS:
1   235				     ;	 CX
1   236				     ; Outcome:
1   237				     ;	 - SI points at	the next left bound symbol
1   238				     ;	 - DI points at	the byte right after the last
1   239				     ;	 byte of the drawn line.
1   240				     ;
1   241				     ; ===================================================
1   242	020F			     DrawHorLine     proc
1   243
1   244	020F  A5				     movsw   ; Left bound symb (A, D or	G)
1   245
1   246						     ; Inner symb (B, E	or H)
1   247	0210  33 C9				     xor cx, cx
1   248	0212  8A C8				     mov cl, al	; cx = w
1   249	0214  83 E9 02				     sub cx, 2h	; without boundary symbols
1   250	0217  A5		     DrHorLineLoop:  movsw
1   251	0218  83 EE 02				     sub si, 2h
1   252	021B  E2 FA				     loop DrHorLineLoop
1   253	021D  83 C6 02				     add si, 2h
1   254
1   255	0220  A5				     movsw   ; Right bound symb	(C, F or I)
1   256
1   257	0221  C3				     ret
1   258	0222					     endp
1   259				     ; ===================================================
1   260
    261				     include PrnText.asm
1   262				     ; ===================================================
1   263				     ; PrintText
1   264				     ; Description:
1   265				     ;	 Prints	given string of	text into the videomem
1   266				     ;	 according to the following rules:
1   267				     ;	 - '\n'	is interpreted as a command to go onto a
1   268				     ;	 new line. New line starts in the same column, as
1   269				     ;	 the first symbol (see args), one row lower.
1   270				     ;	 - '\\'	is printed as a	single '\'.
1   271				     ;	 - Single '\' followed by any symbol other than	'n'
1   272				     ;	 is UB!
1   273				     ;	 - The whole string must end with byte FFh.
1   274				     ;	 - UB if length	of one line exceeds screen width.
1   275				     ;	 - Attribute bytes don't change.
1   276				     ; Args:
1   277				     ;	 - DS:[SI] pointing at the beginning of	the string.
1   278				     ;	 - BL -	Col number of the first	symbol.
1   279				     ;	 - BH -	Row number of the first	symbol.
1   280				     ; Assumes:
1   281				     ;	 ES = 0b800h
1   282				     ; DESTROYS:
1   283				     ;	 AX, CX, DI, BH, DX
1   284				     ; Attention:
1   285				     ;	 All args must have sensible values, otherwise UB.
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 6
frame.asm



1   286				     ; ===================================================
1   287	0222			     PrintText	     proc
1   288
1   289	      =0050		     PrnTextScreenW  equ 80d
1   290
1   291	      =005C		     ByteCtrl	     equ 5Ch	 ; '\'
1   292	      =006E		     ByteNewLine     equ 'n'
1   293	      =00FF		     ByteStrEnd	     equ 0FFh
1   294
1   295						     ; ===================================
1   296						     ; computing offset	in the videomem
1   297						     ; of the first symbol into	DI
1   298
1   299						     ; AX = row	* 80d =	Bh * 80d
1   300	0222  33 C0				     xor ax, ax
1   301	0224  8A C7				     mov al, bh
1   302	0226  B9 0050				     mov cx, 80d
1   303	0229  F7 E1				     mul cx
1   304
1   305	022B  8B F8				     mov di, ax	 ; DI =	row*80
1   306
1   307	022D  33 C0				     xor ax, ax
1   308	022F  8A C3				     mov al, bl	 ; AX =	Bl
1   309	0231  03 F8				     add di, ax	 ; DI += col
1   310
1   311	0233  D1 E7				     shl di, 1	    ; di*=2
1   312
1   313						     ; remembering offset of the first
1   314						     ; symbol in the line
1   315	0235  8B D7				     mov dx, di
1   316
1   317						     ; ===================================
1   318						     ; printing	the string
1   319
1   320	0237  8A 04		     PrnStrLoop:     mov al, [si]    ; al = current symbol
1   321
1   322	0239  3C FF				     cmp al, BYTESTREND
1   323	023B  74 1F				     je	PrnStrFinal
1   324
1   325	023D  3C 5C				     cmp al, BYTECTRL
1   326	023F  75 16				     jne PrnStrCommmon
1   327	0241  46				     inc si
1   328	0242  8A 24				     mov ah, [si]
1   329	0244  80 FC 5C				     cmp ah, BYTECTRL
1   330	0247  74 0E				     je	PrnStrCommmon
1   331	0249  80 FC 6E				     cmp ah, BYTENEWLINE
1   332	024C  75 0E				     jne PRNSTRFINAL
1   333
1   334	024E  46				     inc si
1   335						     ; new line
1   336	024F  81 C2 00A0			     add dx, PrnTextScreenW * 2
1   337	0253  8B FA				     mov di, dx
1   338
1   339	0255  EB E0				     jmp PrnStrLoop
1   340
1   341	0257  AA		     PrnStrCommmon:  stosb
1   342	0258  47				     inc di  ; passing over attribute byte
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 7
frame.asm



1   343	0259  46				     inc si
1   344	025A  EB DB				     jmp PrnStrLoop
1   345	025C			     PrnStrFinal:
1   346	025C  C3				     ret
1   347	025D					     endp
1   348				     ; ===================================================
1   349
    350
    351				     end	 Start
Turbo Assembler	 Version 4.1	    02/17/24 18:22:30	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/17/24"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "18:22:30"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BYTECTRL			  Number 005C
BYTENEWLINE			  Number 006E
BYTESTREND			  Number 00FF
DRAWFRAME			  Near	 DGROUP:0177
DRAWHORLINE			  Near	 DGROUP:020F
DRFRMDATA			  Byte	 DGROUP:01FD
DRFRMDATLOOP			  Near	 DGROUP:0180
DRFRMMLOUTLOOP			  Near	 DGROUP:01D5
DRFRM_SCREEN_H			  Number 0019
DRFRM_SCREEN_W			  Number 0050
DRFRM_TEXT_SEP			  Text	 ':>>:'
DRHORLINELOOP			  Near	 DGROUP:0217
PRINTTEXT			  Near	 DGROUP:0222
PRNSTRCOMMMON			  Near	 DGROUP:0257
PRNSTRFINAL			  Near	 DGROUP:025C
PRNSTRLOOP			  Near	 DGROUP:0237
PRNTEXTSCREENW			  Number 0050
START				  Near	 DGROUP:0100
STYLE1				  Byte	 DGROUP:0112
STYLE2				  Byte	 DGROUP:011C
STYLE3				  Byte	 DGROUP:0126
STYLE4				  Byte	 DGROUP:0130
TESTTEXT			  Byte	 DGROUP:015E
TEXT				  Byte	 DGROUP:013A

Macro Name

.DRFRMNEWLINE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  025D Word	  Public  CODE
