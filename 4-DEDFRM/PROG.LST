Turbo Assembler	 Version 4.1	    02/17/24 13:40:01	    Page 1
prog.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5
      6	0100			     Start:
      7
      8	0100  B0 3C				 mov al, 60d
      9	0102  B4 14				 mov ah, 20d
     10	0104  BE 011Cr				 mov si, offset	STYLE2
     11	0107  BB 0130r				 mov bx, offset	Text
     12
     13	010A  E8 0032				 call DrawFrame
     14
     15						 ; ==============
     16						 ; end
     17	010D  B8 4C13				 mov ax, 4c13h
     18	0110  CD 21				 int 21h
     19
     20	0112  4E 2B 2D 2B 7C 20	7C+  Style1 db 01001110b, '+-+|	|+-+'
     21	      2B 2D 2B
     22	011C  4E 41 42 43 44 45	46+  Style2 db 01001110b, 'ABCDEFGHI'
     23	      47 48 49
     24	0126  4E 20 20 20 20 20	20+  Style3 db 01001110b, '	    '
     25	      20 20 20
     26
     27	0130  48 65 61 64 65 72	3A+  Text   db 'Header:	Hello!$'
     28	      20 48 65 6C 6C 6F	21+
     29	      24
     30
     31				     include DrFrm.asm
1    32				     ; ===================================================
1    33				     ; DrawFrame
1    34				     ; Description:
1    35				     ;	 Draws a frame in videomem.
1    36				     ; Args:
1    37				     ;	 - AL:	     Width
1    38				     ;	 - AH:	     Height
1    39				     ;	 - DS:[SI]:  Address of	string,	containing frame
1    40				     ;		     symbols and attribute byte	(see ***)
1    41				     ;	 - DS:[BX]:  Address of	string,	containing
1    42				     ;		     header and	text as	follows:
1    43				     ;		     'header: text$'. '$' means	end.
1    44				     ; ***:
1    45				     ;	 Starts	with the attribute byte, followed by 9
1    46				     ;	 bytes with symbols, used for frame. Example:
1    47				     ;
1    48				     ;	 Bytes:
1    49				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
1    50				     ;	 Corresponding symbols:
1    51				     ;	 A   B	 C   D	 E   F	 G   H	 I
1    52				     ;
1    53				     ;	 Frame will be drawn in	the following way:
1    54				     ;
1    55				     ;	 AB......BC
1    56				     ;	 DE......EF
1    57				     ;	 ..........
Turbo Assembler	 Version 4.1	    02/17/24 13:40:01	    Page 2
prog.asm



1    58				     ;	 DE......EF
1    59				     ;	 GH......HI
1    60				     ;
1    61				     ;	 So, this string must contain 10 bytes.
1    62				     ; Attention:
1    63				     ;	 All args must have sensible values, otherwise UB.
1    64				     ; DESTROYS:
1    65				     ;
1    66				     ; ===================================================
1    67	013F			     DrawFrame	     proc
1    68	      =0050		     SCREEN_WIDTH    equ 80d
1    69	      =0019		     SCREEN_HEIGHT   equ 25d
1    70
1    71	      =0000		     BYTE_ATTR	     equ 0d
1    72	      =0001		     BYTE_A	     equ 1d
1    73	      =0002		     BYTE_B	     equ 2d
1    74	      =0003		     BYTE_C	     equ 3d
1    75	      =0004		     BYTE_D	     equ 4d
1    76	      =0005		     BYTE_E	     equ 5d
1    77	      =0006		     BYTE_F	     equ 6d
1    78	      =0007		     BYTE_G	     equ 7d
1    79	      =0008		     BYTE_H	     equ 8d
1    80	      =0009		     BYTE_I	     equ 9d
1    81
1    82						     ; ====================================
1    83						     ; moving style bytes to DrFrmData
1    84
1    85	013F  BF 01E4r				     mov di, offset DRFRMDATA
1    86	0142  8A 34				     mov dh, [si] ; dh = attribute byte
1    87	0144  46				     inc si ; [si] -> byte_A
1    88
1    89	0145  B9 0009				     mov cx, 9d
1    90	0148  8A 14		     DrFrmDatLoop:   mov dl, [si]
1    91	014A  88 15				     mov [di], dl
1    92	014C  88 75 01				     mov [di + 1], dh
1    93	014F  46				     inc si
1    94	0150  83 C7 02				     add di, 2d
1    95	0153  E2 F3				     loop DrFrmDatLoop
1    96
1    97	0155  BE 01E4r				     mov si, offset DRFRMDATA
1    98
1    99						     ; ====================================
1   100						     ; computing into DI address of the	A
1   101
1   102						     ; cl = col	= (screen_w - w) / 2
1   103	0158  8A C8				     mov cl, al
1   104	015A  80 E9 50				     sub cl, SCREEN_WIDTH
1   105	015D  F6 D9				     neg cl
1   106	015F  D0 E9				     shr cl, 1
1   107
1   108						     ; ch = row	= (screen_h - h) / 2
1   109	0161  8A EC				     mov ch, ah
1   110	0163  80 ED 19				     sub ch, SCREEN_HEIGHT
1   111	0166  F6 DD				     neg ch
1   112	0168  D0 ED				     shr ch, 1
1   113
1   114						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
Turbo Assembler	 Version 4.1	    02/17/24 13:40:01	    Page 3
prog.asm



1   115						     ; ASSUMING	SCREEN_WIDTH = 80
1   116	016A  33 FF				     xor di, di
1   117	016C  50				     push ax ; saving
1   118
1   119	016D  33 C0				     xor ax, ax
1   120	016F  8A C5				     mov al, ch
1   121	0171  BA 0050				     mov dx, 80d
1   122	0174  F6 E2				     mul dl
1   123
1   124	0176  03 F8				     add di, ax
1   125
1   126	0178  8A D1				     mov dl, cl
1   127	017A  03 FA				     add di, dx
1   128
1   129	017C  D1 E7				     shl di, 1
1   130
1   131						     ; while ax	is free...
1   132	017E  B8 B800				     mov ax, 0B800h
1   133	0181  8E C0				     mov es, ax
1   134
1   135	0183  58				     pop ax
1   136
1   137						     ; ====================================
1   138						     ; drawing top line
1   139
1   140	0184  A5				     movsw   ; A
1   141
1   142						     ; BBB
1   143	0185  33 C9				     xor cx, cx
1   144	0187  8A C8				     mov cl, al	; cx = w
1   145	0189  83 E9 02				     sub cx, 2h	; without boundary symbols
1   146	018C  A5		     DrFrmTLLoop:    movsw
1   147	018D  83 EE 02				     sub si, 2h
1   148	0190  E2 FA				     loop DrFrmTLLoop
1   149	0192  83 C6 02				     add si, 2h
1   150
1   151	0195  A5				     movsw   ; C
1   152
1   153						     ; ====================================
1   154						     ; drawing middle line(s)
1   155
1   156	0196  81 C7 00A0			     add di, SCREEN_WIDTH * 2 ;	next line:
1   157	019A  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1   158	019C  8A D0				     mov dl, al
1   159	019E  02 D0				     add dl, al
1   160	01A0  2B FA				     sub di, dx
1   161
1   162
1   163	01A2  33 C9				     xor cx, cx	; cx = height -	2
1   164	01A4  8A CC				     mov cl, ah
1   165	01A6  83 E9 02				     sub cx, 2h
1   166	01A9  A5		     DrFrmMLOutLoop: movsw	; D
1   167
1   168	01AA  51				     push cx ; saving outter loop cnt
1   169
1   170						     ; EEE
1   171	01AB  33 C9				     xor cx, cx
Turbo Assembler	 Version 4.1	    02/17/24 13:40:01	    Page 4
prog.asm



1   172	01AD  8A C8				     mov cl, al	; cx = w
1   173	01AF  83 E9 02				     sub cx, 2h	; without boundary symbols
1   174	01B2  A5		     DrFrmMLINLoop:  movsw
1   175	01B3  83 EE 02				     sub si, 2h
1   176	01B6  E2 FA				     loop DrFrmMLINLoop
1   177	01B8  83 C6 02				     add si, 2h
1   178
1   179	01BB  A5				     movsw ; F
1   180
1   181	01BC  81 C7 00A0			     add di, SCREEN_WIDTH * 2 ;	next line:
1   182	01C0  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1   183	01C2  8A D0				     mov dl, al
1   184	01C4  02 D0				     add dl, al
1   185	01C6  2B FA				     sub di, dx
1   186
1   187	01C8  83 EE 06				     sub si, 6d	 ; returning back to D
1   188
1   189	01CB  59				     pop cx ; ressurecting outter loop cnt
1   190	01CC  E2 DB				     loop DrFrmMLOutLoop
1   191
1   192						     ; ====================================
1   193						     ; drawing bottom line
1   194
1   195	01CE  83 C6 06				     add si, 6d	 ; setting to G
1   196
1   197	01D1  A5				     movsw ; G
1   198
1   199						     ; HHH
1   200	01D2  33 C9				     xor cx, cx
1   201	01D4  8A C8				     mov cl, al	; cx = w
1   202	01D6  83 E9 02				     sub cx, 2h	; without boundary symbols
1   203	01D9  A5		     DrFrmBLLoop:    movsw
1   204	01DA  83 EE 02				     sub si, 2h
1   205	01DD  E2 FA				     loop DrFrmBLLoop
1   206	01DF  83 C6 02				     add si, 2h
1   207
1   208	01E2  A5				     movsw ; I
1   209
1   210						     ; ====================================
1   211						     ; end
1   212	01E3  C3				     ret
1   213
1   214				     ; is filled with all frame	symbols
1   215				     ; and attribute bytes (#) to simplify some	code
1   216	01E4  12*(??)		     DrFrmData	     db	18 DUP(?)
1   217				     ;			A # B #	... I #
1   218
1   219	01F6					     endp
1   220				     ; ===================================================
1   221
    222
    223				     end	 Start
Turbo Assembler	 Version 4.1	    02/17/24 13:40:01	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/17/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "13:40:01"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BYTE_A				  Number 0001
BYTE_ATTR			  Number 0000
BYTE_B				  Number 0002
BYTE_C				  Number 0003
BYTE_D				  Number 0004
BYTE_E				  Number 0005
BYTE_F				  Number 0006
BYTE_G				  Number 0007
BYTE_H				  Number 0008
BYTE_I				  Number 0009
DRAWFRAME			  Near	 DGROUP:013F
DRFRMBLLOOP			  Near	 DGROUP:01D9
DRFRMDATA			  Byte	 DGROUP:01E4
DRFRMDATLOOP			  Near	 DGROUP:0148
DRFRMMLINLOOP			  Near	 DGROUP:01B2
DRFRMMLOUTLOOP			  Near	 DGROUP:01A9
DRFRMTLLOOP			  Near	 DGROUP:018C
SCREEN_HEIGHT			  Number 0019
SCREEN_WIDTH			  Number 0050
START				  Near	 DGROUP:0100
STYLE1				  Byte	 DGROUP:0112
STYLE2				  Byte	 DGROUP:011C
STYLE3				  Byte	 DGROUP:0126
TEXT				  Byte	 DGROUP:0130

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01F6 Word	  Public  CODE
