Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 1
prog.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     org 100h
      5
      6	0100			     Start:
      7
      8	0100  B0 14				 mov al, 20d
      9	0102  B4 08				 mov ah, 8d
     10	0104  BE 011Cr				 mov si, offset	STYLE2
     11	0107  BB 0130r				 mov bx, offset	Text
     12
     13	010A  E8 0032				 call DrawFrame
     14
     15						 ; ==============
     16						 ; end
     17	010D  B8 4C13				 mov ax, 4c13h
     18	0110  CD 21				 int 21h
     19
     20	0112  4E 2B 2D 2B 7C 20	7C+  Style1 db 01001110b, '+-+|	|+-+'
     21	      2B 2D 2B
     22	011C  4E 41 42 43 44 45	46+  Style2 db 01001110b, 'ABCDEFGHI'
     23	      47 48 49
     24	0126  4E 20 20 20 20 20	20+  Style3 db 01001110b, '	    '
     25	      20 20 20
     26
     27	0130  48 65 61 64 65 72	3A+  Text   db 'Header:	Hello!$'
     28	      20 48 65 6C 6C 6F	21+
     29	      24
     30
     31				     include DrFrm.asm
1    32				     .DrFrmNewLine   macro
1    33						     add di, SCREEN_WIDTH * 2 ;	next line:
1    34						     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
1    35						     mov dl, al
1    36						     add dl, al
1    37						     sub di, dx
1    38						     endm
1    39
1    40				     ; ===================================================
1    41				     ; DrawFrame
1    42				     ; Description:
1    43				     ;	 Draws a frame in videomem.
1    44				     ; Args:
1    45				     ;	 - AL:	     Width
1    46				     ;	 - AH:	     Height
1    47				     ;	 - DS:[SI]:  Address of	string,	containing frame
1    48				     ;		     symbols and attribute byte	(see ***)
1    49				     ;	 - DS:[BX]:  Address of	string,	containing
1    50				     ;		     header and	text as	follows:
1    51				     ;		     'header: text$'. '$' means	end.
1    52				     ; ***:
1    53				     ;	 Starts	with the attribute byte, followed by 9
1    54				     ;	 bytes with symbols, used for frame. Example:
1    55				     ;
1    56				     ;	 Bytes:
1    57				     ;	 41h 42h 43h 44h 45h 46h 47h 48h 49h
Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 2
prog.asm



1    58				     ;	 Corresponding symbols:
1    59				     ;	 A   B	 C   D	 E   F	 G   H	 I
1    60				     ;
1    61				     ;	 Frame will be drawn in	the following way:
1    62				     ;
1    63				     ;	 AB......BC
1    64				     ;	 DE......EF
1    65				     ;	 ..........
1    66				     ;	 DE......EF
1    67				     ;	 GH......HI
1    68				     ;
1    69				     ;	 So, this string must contain 10 bytes.
1    70				     ; Attention:
1    71				     ;	 All args must have sensible values, otherwise UB.
1    72				     ; DESTROYS:
1    73				     ;
1    74				     ; ===================================================
1    75	013F			     DrawFrame	     proc
1    76	      =0050		     SCREEN_WIDTH    equ 80d
1    77	      =0019		     SCREEN_HEIGHT   equ 25d
1    78
1    79	      =0000		     BYTE_ATTR	     equ 0d
1    80	      =0001		     BYTE_A	     equ 1d
1    81	      =0002		     BYTE_B	     equ 2d
1    82	      =0003		     BYTE_C	     equ 3d
1    83	      =0004		     BYTE_D	     equ 4d
1    84	      =0005		     BYTE_E	     equ 5d
1    85	      =0006		     BYTE_F	     equ 6d
1    86	      =0007		     BYTE_G	     equ 7d
1    87	      =0008		     BYTE_H	     equ 8d
1    88	      =0009		     BYTE_I	     equ 9d
1    89
1    90						     ; ====================================
1    91						     ; moving style bytes to DrFrmData
1    92
1    93	013F  BF 01B7r				     mov di, offset DRFRMDATA
1    94	0142  8A 34				     mov dh, [si] ; dh = attribute byte
1    95	0144  46				     inc si ; [si] -> byte_A
1    96
1    97	0145  B9 0009				     mov cx, 9d
1    98	0148  8A 14		     DrFrmDatLoop:   mov dl, [si]
1    99	014A  88 15				     mov [di], dl
1   100	014C  88 75 01				     mov [di + 1], dh
1   101	014F  46				     inc si
1   102	0150  83 C7 02				     add di, 2d
1   103	0153  E2 F3				     loop DrFrmDatLoop
1   104
1   105	0155  BE 01B7r				     mov si, offset DRFRMDATA
1   106
1   107						     ; ====================================
1   108						     ; computing into DI address of the	A
1   109
1   110						     ; cl = col	= (screen_w - w) / 2
1   111	0158  8A C8				     mov cl, al
1   112	015A  80 E9 50				     sub cl, SCREEN_WIDTH
1   113	015D  F6 D9				     neg cl
1   114	015F  D0 E9				     shr cl, 1
Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 3
prog.asm



1   115
1   116						     ; ch = row	= (screen_h - h) / 2
1   117	0161  8A EC				     mov ch, ah
1   118	0163  80 ED 19				     sub ch, SCREEN_HEIGHT
1   119	0166  F6 DD				     neg ch
1   120	0168  D0 ED				     shr ch, 1
1   121
1   122						     ; di = (row*screen_w + col)*2 = (ch*screen_w+cl)*2
1   123						     ; ASSUMING	SCREEN_WIDTH = 80
1   124	016A  33 FF				     xor di, di
1   125	016C  50				     push ax ; saving
1   126
1   127	016D  33 C0				     xor ax, ax
1   128	016F  8A C5				     mov al, ch
1   129	0171  BA 0050				     mov dx, 80d
1   130	0174  F6 E2				     mul dl
1   131
1   132	0176  03 F8				     add di, ax
1   133
1   134	0178  8A D1				     mov dl, cl
1   135	017A  03 FA				     add di, dx
1   136
1   137	017C  D1 E7				     shl di, 1
1   138
1   139						     ; while ax	is free...
1   140	017E  B8 B800				     mov ax, 0B800h
1   141	0181  8E C0				     mov es, ax
1   142
1   143	0183  58				     pop ax
1   144
1   145						     ; ====================================
1   146						     ; drawing top line
1   147
1   148	0184  E8 0042				     call DrawHorLine
1   149
1   150						     ; ====================================
1   151						     ; drawing middle line(s)
1   152
1   153						     .DrFrmNewLine
2   154	0187  81 C7 00A0			     add di, SCREEN_WIDTH * 2 ;	next line:
2   155	018B  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   156	018D  8A D0				     mov dl, al
2   157	018F  02 D0				     add dl, al
2   158	0191  2B FA				     sub di, dx
1   159
1   160	0193  33 C9				     xor cx, cx	; cx = height -	2
1   161	0195  8A CC				     mov cl, ah
1   162	0197  83 E9 02				     sub cx, 2h
1   163	019A			     DrFrmMLOutLoop:
1   164	019A  51				     push cx ; saving outter loop cnt
1   165
1   166	019B  E8 002B				     call DrawHorLine
1   167
1   168						     .DrFrmNewLine
2   169	019E  81 C7 00A0			     add di, SCREEN_WIDTH * 2 ;	next line:
2   170	01A2  33 D2				     xor dx, dx		      ;	di = di	+ screen_w*2-w*2
2   171	01A4  8A D0				     mov dl, al
Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 4
prog.asm



2   172	01A6  02 D0				     add dl, al
2   173	01A8  2B FA				     sub di, dx
1   174
1   175	01AA  83 EE 06				     sub si, 6d	 ; returning back to D
1   176
1   177	01AD  59				     pop cx ; ressurecting outter loop cnt
1   178	01AE  E2 EA				     loop DrFrmMLOutLoop
1   179
1   180						     ; ====================================
1   181						     ; drawing bottom line
1   182
1   183	01B0  83 C6 06				     add si, 6d	 ; setting to G
1   184
1   185	01B3  E8 0013				     call DrawHorLine
1   186
1   187						     ; ====================================
1   188						     ; end
1   189	01B6  C3				     ret
1   190
1   191				     ; is filled with all frame	symbols
1   192				     ; and attribute bytes (#) to simplify some	code
1   193	01B7  12*(??)		     DrFrmData	     db	18 DUP(?)
1   194				     ;			A # B #	... I #
1   195
1   196	01C9					     endp
1   197				     ; ===================================================
1   198
1   199				     ; ===================================================
1   200				     ; DrawHorLine
1   201				     ; Description:
1   202				     ;	 Helping function DrawFrame. Not for using on its
1   203				     ;	 own.
1   204				     ; Assumes:
1   205				     ;	 - SI points at	A, D or	G
1   206				     ;	 - Width of the	line in	AL
1   207				     ; DESTROYS:
1   208				     ;	 CX
1   209				     ; Outcome:
1   210				     ;	 - SI points at	the next left bound symbol
1   211				     ;	 - DI points at	the byte right after the last
1   212				     ;	 byte of the drawn line.
1   213				     ;
1   214				     ; ===================================================
1   215	01C9			     DrawHorLine     proc
1   216
1   217	01C9  A5				     movsw   ; Left bound symb (A, D or	G)
1   218
1   219						     ; Inner symb (B, E	or H)
1   220	01CA  33 C9				     xor cx, cx
1   221	01CC  8A C8				     mov cl, al	; cx = w
1   222	01CE  83 E9 02				     sub cx, 2h	; without boundary symbols
1   223	01D1  A5		     DrHorLineLoop:  movsw
1   224	01D2  83 EE 02				     sub si, 2h
1   225	01D5  E2 FA				     loop DrHorLineLoop
1   226	01D7  83 C6 02				     add si, 2h
1   227
1   228	01DA  A5				     movsw   ; Right bound symb	(C, F or I)
Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 5
prog.asm



1   229
1   230	01DB  C3				     ret
1   231	01DC					     endp
1   232				     ; ===================================================
1   233
    234
    235				     end	 Start
Turbo Assembler	 Version 4.1	    02/17/24 14:12:11	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/17/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "14:12:11"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BYTE_A				  Number 0001
BYTE_ATTR			  Number 0000
BYTE_B				  Number 0002
BYTE_C				  Number 0003
BYTE_D				  Number 0004
BYTE_E				  Number 0005
BYTE_F				  Number 0006
BYTE_G				  Number 0007
BYTE_H				  Number 0008
BYTE_I				  Number 0009
DRAWFRAME			  Near	 DGROUP:013F
DRAWHORLINE			  Near	 DGROUP:01C9
DRFRMDATA			  Byte	 DGROUP:01B7
DRFRMDATLOOP			  Near	 DGROUP:0148
DRFRMMLOUTLOOP			  Near	 DGROUP:019A
DRHORLINELOOP			  Near	 DGROUP:01D1
SCREEN_HEIGHT			  Number 0019
SCREEN_WIDTH			  Number 0050
START				  Near	 DGROUP:0100
STYLE1				  Byte	 DGROUP:0112
STYLE2				  Byte	 DGROUP:011C
STYLE3				  Byte	 DGROUP:0126
TEXT				  Byte	 DGROUP:0130

Macro Name

.DRFRMNEWLINE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01DC Word	  Public  CODE
